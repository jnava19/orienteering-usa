<?php
// $Id$
/**
* @file
* MoneyScripts Authorize.net Gateway Module
* Developed by Leighton Whiting for MoneyScripts.net (http://www.moneyscripts.net)
*/

/**
* Display help and module information
*/
function ms_authorizenet_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_authorizenet":
      $output = '<p>'.  t("Authorize.net Payment Gateway Module for MoneyScripts") .'</p>';
      break;
  }
  return $output;
}

function ms_authorizenet_access_test() {
  return TRUE;
}

function ms_authorizenet_recurring_user_access($user, $rfid) {
  return TRUE;
}

function ms_authorizenet_modify_test($oid, $id) {
  global $user;
  $order = ms_core_order_load($oid);
  if ($user->uid == $order->uid) {
    return TRUE;
  }
  return FALSE;
}

function ms_authorizenet_cancel_test($oid) {
  global $user;
  $order = ms_core_order_load($oid);
  if ($user->uid == $order->uid OR user_access('administer moneyscripts orders')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_menu
 */
function ms_authorizenet_menu() {
  $items = array();
  
  $items['ms_authorizenet/silent-post'] = array(
    'page callback' => 'ms_authorizenet_silent_post',
    'access callback' => 'ms_authorizenet_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms_authorizenet_arb/cancel/%'] = array(
    'title' => 'Cancel Payments',
    'page callback' => 'ms_authorizenet_cancel_arb_page',
    'page arguments' => array(2),
    'access callback' => 'ms_authorizenet_cancel_test',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['ms_authorizenet_arb/billing/%'] = array(
    'title' => 'Change Billing',
    'page callback' => 'ms_authorizenet_arb_billing_page',
    'page arguments' => array(2),
    'access callback' => 'ms_authorizenet_cancel_test',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['ms_authorizenet_arb/modify/%/%'] = array(
    'title' => 'Modify Payments',
    'page callback' => 'ms_authorizenet_modify_arb_page',
    'page arguments' => array(2, 3),
    'access callback' => 'ms_authorizenet_modify_test',
    'access arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
  );
  $items['ms_authorizenet_cim/cancel/%'] = array(
    'title' => 'Cancel Payments',
    'page callback' => 'ms_authorizenet_cancel_cim_page',
    'page arguments' => array(2),
    'access callback' => 'ms_authorizenet_cancel_test',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['ms_authorizenet_cim/modify/%/%'] = array(
    'title' => 'Modify Payments',
    'page callback' => 'ms_authorizenet_modify_cim_page',
    'page arguments' => array(2, 3),
    'access callback' => 'ms_authorizenet_modify_test',
    'access arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
  );
  $items['ms/checkout/authorize'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_authorizenet_checkout',
    'access callback' => 'ms_authorizenet_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms_authorizenet/thank-you'] = array(
    'title' => 'Thank You',
    'page callback' => 'ms_authorizenet_thankyou_page',
    'access callback' => 'ms_authorizenet_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneyscripts/gateways/ms_authorizenet'] = array(
    'title' => 'Authorize.net',
    'description' => 'Set the various Authorize.net Gateway Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_authorizenet_admin'),
    'access arguments' => array('administer moneyscripts settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_cron
 */
function ms_authorizenet_cron() {
  // Process payments that need to be processed for CIM
  $result = db_query("SELECT * FROM {ms_recurring_schedules} WHERE gateway = '%s' AND status = '%s' AND next_payment < %d", 
    'ms_authorizenet_cim', 'active', time());
  
  while ($recurring_schedule = db_fetch_object($result)) {
    // Load some variables
    $order = ms_core_order_load($recurring_schedule->oid);
    $account = user_load($order->uid);
    $cim_profile = ms_authorizenet_get_cim_profile($account->uid);
    $payment_profile = ms_authorizenet_get_payment_profile($account->uid);
    $shipping_profile = ms_authorizenet_get_shipping_profile($account->uid);
    
    if ($cim_profile AND $payment_profile AND $shipping_profile) {
      // Process the next payment using CIM
      watchdog('debug', 'Main Amount: '. $recurring_schedule->main_amount);
      $response = ms_authorizenet_cim_charge($order, $recurring_schedule->main_amount, $cim_profile, $payment_profile, $shipping_profile);
        
      if ($response['approved']) {
        // Log this
        if (variable_get('ms_core_debug_mode', FALSE)) {
          watchdog('ms_authorizenet', 'Processing Recurring CIM Charge for Order #!num. Here are the details: @message', 
            array('!num' => $order->oid, '@message' => '<pre>'. print_r($recurring_schedule, TRUE) .'</pre>'));
        }
        // Insert the rec_payment Payment to the database
        $payment = new stdClass();
        $payment->oid = $order->oid;
        $payment->gateway = 'ms_authorizenet_cim';
        $payment->type = 'rec_payment';
        $payment->transaction = $response['data']['auth_code'];
        $payment->amount = $recurring_schedule->main_amount;
        $payment->currency = 'USD';
        $payment->data = $response['data'];
        $payment->recurring_schedule = $order->recurring_schedule;
        
        // Update the address
        $payment->billing_address = array(
          'street' => $payment_profile->billToAddress,
          'city' => $payment_profile->billToCity,
          'state' => $payment_profile->billToState,
          'zip' => $payment_profile->billToZip,
          'country' => $payment_profile->billToCountry,
          'phone' => $payment_profile->billToPhoneNumber,
          );
        $payment->shipping_address = array(
          'street' => $shipping_profile->shipToAddress,
          'city' => $shipping_profile->shipToCity,
          'state' => $shipping_profile->shipToState,
          'zip' => $shipping_profile->shipToZip,
          'country' => $shipping_profile->shipToCountry,
          'phone' => $shipping_profile->shipToPhoneNumber,
          );
        // Update the contact details
        $payment->full_name = $payment_profile->billToFirstName .' '. $payment_profile->billToLastName;
        
        // Add the Payment to the Order
        ms_core_enter_payment($payment, FALSE);
        
        // Check if the recurring_schedule is done, send rec_eot
        if ($recurring_schedule->total_occurrences != 0 AND $recurring_schedule->total_occurrences <= ($recurring_schedule->current_payments + 1)) {
          $payment->type = 'rec_eot';
          $payment->amount = 0;
          ms_core_enter_payment($payment, FALSE);
        }
      }
      else {
        // Log the error
        watchdog('ms_authorizenet', 'Error Processing CIM Charge: @message', 
          array('@message' => $response['message']), WATCHDOG_ERROR);
        // If the failed payments counter is greater than or equal to the allowed amount, cancel the order, send rec_cancel
        if ($recurring_schedule->failed_payments >= variable_get('ms_authorizenet_retry_attempts', 3)) {
          // Insert the rec_cancel Payment to the database
          $payment = new stdClass();
          $payment->oid = $order->oid;
          $payment->gateway = 'ms_authorizenet_cim';
          $payment->type = 'rec_cancel';
          $payment->transaction = drupal_get_token(serialize($order));
          $payment->amount = 0;
          $payment->currency = 'USD';
          $payment->data = $response['data'];
          $payment->recurring_schedule = $order->recurring_schedule;
          
          // Update the address
          $payment->billing_address = array(
            'street' => $payment_profile->billToAddress,
            'city' => $payment_profile->billToCity,
            'state' => $payment_profile->billToState,
            'zip' => $payment_profile->billToZip,
            'country' => $payment_profile->billToCountry,
            'phone' => $payment_profile->billToPhoneNumber,
            );
          $payment->shipping_address = array(
            'street' => $shipping_profile->shipToAddress,
            'city' => $shipping_profile->shipToCity,
            'state' => $shipping_profile->shipToState,
            'zip' => $shipping_profile->shipToZip,
            'country' => $shipping_profile->shipToCountry,
            'phone' => $shipping_profile->shipToPhoneNumber,
            );
          // Update the contact details
          $payment->full_name = $payment_profile->billToFirstName .' '. $payment_profile->billToLastName;
          
          // Add the Payment to the Order
          ms_core_enter_payment($payment, FALSE);
        }
        else {
          // FIXME - Submit a rec_failed payment, move the error handling to core
          // Email the User with the error details and instruct them to update their card
          if (variable_get('ms_authorizenet_billing_error_body', '')) {
            $vars = array(
              'payment_profile' => $payment_profile,
            );
            drupal_mail('ms_authorizenet', 'billing_error', $account->mail, user_preferred_language($account), $vars);
          }
          
          // Mark the recurring_schedule next_payment date in 3 days
          db_query("UPDATE {ms_recurring_schedules} SET next_payment = %d WHERE id = %d", 
            strtotime('+3 days', $recurring_schedule->next_payment), $recurring_schedule->id);
          // Increment the Failed Payments counter
          db_query("UPDATE {ms_recurring_schedules} SET failed_payments = %d WHERE id = %d", 
            $recurring_schedule->failed_payments + 1, $recurring_schedule->id);
        }
      }
    }
    else {
      // Log the error
      watchdog('ms_authorizenet', 'Error Loading CIM Profiles for Recurring Payment: @message', 
        array('@message' => '<pre>'. print_r($recurring_schedule, TRUE) .'</pre>'), WATCHDOG_ERROR);
      // FIXME - Submit a rec_failed payment, move the error handling to core
      // Email the User with the error details and instruct them to update their card
      if (variable_get('ms_authorizenet_billing_error_body', '')) {
        $vars = array(
          'payment_profile' => $payment_profile,
        );
        drupal_mail('ms_authorizenet', 'billing_error', $account->mail, user_preferred_language($account), $vars);
      }
      
      // Mark the recurring_schedule next_payment date in 3 days
      db_query("UPDATE {ms_recurring_schedules} SET next_payment = %d WHERE id = %d", 
        strtotime('+3 days', $recurring_schedule->next_payment), $recurring_schedule->id);
      // Increment the Failed Payments counter
      db_query("UPDATE {ms_recurring_schedules} SET failed_payments = %d WHERE id = %d", 
        $recurring_schedule->failed_payments + 1, $recurring_schedule->id);
    }
  }
  
  // Check for cards that are expiring soon, and send a notice to the user to change them
  $frequency = (int) variable_get('ms_authorizenet_expiration_reminder_frequency', 3);
  if (variable_get('ms_authorizenet_last_expiration_reminder', 0) < (time() - (86400 * $frequency)) AND variable_get('ms_authorizenet_expiration_reminder_body', '')) {
    variable_set('ms_authorizenet_last_expiration_reminder', time());
    
    $month = (int) date('n');
    $year = (int) date('Y');
    $threshold = (int) variable_get('ms_authorizenet_expiration_reminder_months', 1);
    
    // Set the month and year variables
    if ($month <= $threshold) {
      $month = (12 - $threshold) + $month;
      $year -= 1;
    }
    else {
      $month -= $threshold;
    }
    
    $result = db_query("SELECT * FROM {ms_authorizenet_payment_profiles} WHERE status = %d AND expirationYear <= %d AND expirationMonth <= %d",
      1, $year, $month);
    
    while ($row = db_fetch_object($result)) {
      $account = user_load($row->uid);
      
      $vars = array(
        'payment_profile' => $row,
      );
      
      // Send the card expiring soon email
      drupal_mail('ms_authorizenet', 'expirationReminder', $account->mail, user_preferred_language($account), $vars);
    }
  }
}

// ======================================
// Administration Page:
// ======================================

/**
 * Admin Settings Form
 */
function ms_authorizenet_admin() {
  
  $form['api_id_key'] = array(
    '#type' => 'fieldset',
    '#title' => t('API Login ID and Transaction Key'),
    '#description' => t('This information is required to interact with your payment gateway account.  It is different from your login ID and password and may be found through your account settings page.'),
  );
  $form['api_id_key']['ms_authorizenet_api_login_id'] = array(
    '#type' => 'textfield',
    '#title' => t('API Login ID'),
    '#default_value' => variable_get('ms_authorizenet_api_login_id', ''),
  );
  $form['api_id_key']['ms_authorizenet_api_transaction_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction Key'),
    '#default_value' => variable_get('ms_authorizenet_api_transaction_key', ''),
  );
  
  $form['aim_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('AIM settings'),
    '#description' => t('These settings pertain to the Authorize.Net AIM payment method for card not present transactions.'),
  );
  $form['aim_settings']['ms_authorizenet_aim_txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Only specify a developer test account if you login to your account through https://test.authorize.net.<br/>Adjust to live transactions when you are ready to start processing real payments.'),
    '#options' => array(
      'live' => t('Live transactions in a live account'),
      'live_test' => t('Test transactions in a live account'),
      'developer_test' => t('Developer test account transactions'),
    ),
    '#default_value' => variable_get('ms_authorizenet_aim_txn_mode', 'live_test'),
  );
  
  $form['aim_settings']['ms_authorizenet_aim_email_customer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tell Authorize.net to e-mail the customer a receipt based on your account settings.'),
    '#default_value' => variable_get('ms_authorizenet_aim_email_customer', FALSE),
  );
  
  $form['arb_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('ARB settings'),
    '#description' => t('These settings pertain to the Authorize.Net Automated Recurring Billing service.')
  );
  $form['arb_settings']['ms_authorizenet_arb_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Only specify developer mode if you login to your account through https://test.authorize.net.<br />Adjust to production mode when you are ready to start processing real recurring fees.'),
    '#options' => array(
      'production' => t('Production'),
      'developer' => t('Developer test'),
      'disabled' => t('Disabled'),
    ),
    '#default_value' => variable_get('ms_authorizenet_arb_mode', 'disabled'),
  );
  $form['arb_settings']['ms_authorizenet_md5_hash'] = array(
    '#type' => 'textfield',
    '#title' => t('MD5 Hash'),
    '#description' => t('<b>Note:</b> You must first configure credit card encryption before setting this.<br />Enter the value here you entered in your Auth.Net account settings.'),
    '#default_value' => variable_get('ms_authorizenet_md5_hash', ''),
  );
  $form['arb_settings']['ms_authorizenet_silent_post_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Silent Post URL'),
    '#attributes' => array('readonly' => 'readonly'),
    '#description' => t('<b>Note:</b> You must enter this Silent Post URL in your Auth.Net account settings to receive notifications for recurring payments and let the system act on these payments (used by Affiliates Suite and others).'),
    '#default_value' => url('ms_authorizenet/silent-post', array('absolute' => TRUE)),
  );
  
  $form['cim_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('CIM settings'),
    '#description' => t('These settings pertain to the Authorize.Net Customer Information Management service.')
  );
  $form['cim_settings']['ms_authorizenet_cim_profile'] = array(
    '#type' => 'checkbox',
    '#title' => t('Always create a CIM profile for securely storing CC info for later use.'),
    '#default_value' => variable_get('ms_authorizenet_cim_profile', FALSE),
  );
  $form['cim_settings']['ms_authorizenet_cim_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Only specify a developer test account if you login to your account through https://test.authorize.net.<br/>Adjust to live transactions when you are ready to start processing real payments.'),
    '#options' => array(
      'production' => t('Production'),
      'developer' => t('Developer test'),
      'disabled' => t('Disabled'),
    ),
    '#default_value' => variable_get('ms_authorizenet_cim_mode', 'disabled'),
  );
  $form['cim_settings']['ms_authorizenet_retry_attempts'] = array(
    '#type' => 'textfield',
    '#title' => t('Retry Attempts'),
    '#description' => t('How many times should the system retry charging a card? If a scheduled charge fails, the user is notified that they need to update their billing information, and the order is scheduled to be charged again in 3 days.'),
    '#default_value' => variable_get('ms_authorizenet_retry_attempts', 3),
  );
  
  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['email']['ms_authorizenet_expiration_reminder_months'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Expiring Soon Threshold'),
    '#required' => FALSE,
    '#description' => t("How many months before the card expires should the expiring soon email be sent?."),
    '#default_value' => variable_get('ms_authorizenet_expiration_reminder_months', 1),
  );
  $form['email']['ms_authorizenet_expiration_reminder_frequency'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Expiring Soon Reminder Frequency'),
    '#required' => FALSE,
    '#description' => t("Send the Expiring Soon email every X days."),
    '#default_value' => variable_get('ms_authorizenet_expiration_reminder_frequency', 3),
  );
  $form['email']['ms_authorizenet_expiration_reminder_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Expiring Soon Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_authorizenet_expiration_reminder_subject', t("Please update your Billing Info")),
  );
  $form['email']['ms_authorizenet_expiration_reminder_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Card Expiring Soon Email Body'),
    '#description' => t("Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_authorizenet_expiration_reminder_body', t("Your credit card [cardNumber] is expiring soon. To avoid interruption of service, please update your billing information here: [updateUrl]

Sincerely,
Site Admin")),
  );
  $form['email']['ms_authorizenet_expiration_reminder_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['ms_authorizenet_expiration_reminder_token_help']['help'] = array(
    '#value' => theme('token_help', array('ms_authorizenet_payment_profile', 'user')),
  );
  
  $form['email']['ms_authorizenet_card_update_confirm_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Updated Confirmation Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_authorizenet_card_update_confirm_subject', t("Billing Information Changed")),
  );
  $form['email']['ms_authorizenet_card_update_confirm_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Card Updated Confirmation Email Body'),
    '#description' => t("Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_authorizenet_card_update_confirm_body', t("Your billing information has been successfully updated.

Sincerely,
Site Admin")),
  );
  $form['email']['ms_authorizenet_card_update_confirm_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['ms_authorizenet_card_update_confirm_token_help']['help'] = array(
    '#value' => theme('token_help', array('ms_authorizenet_payment_profile', 'user')),
  );
  
  $form['email']['ms_authorizenet_billing_error_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Billing Error Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_authorizenet_billing_error_subject', t("There was a problem when processing your credit card.")),
  );
  $form['email']['ms_authorizenet_billing_error_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Card Billing Error Email Body'),
    '#description' => t("Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_authorizenet_billing_error_body', t("Your credit card [cardNumber] could not be processed. To avoid interruption of service, please update your billing information here: [updateUrl]

Sincerely,
Site Admin")),
  );
  $form['email']['ms_authorizenet_billing_error_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['ms_authorizenet_billing_error_token_help']['help'] = array(
    '#value' => theme('token_help', array('ms_authorizenet_payment_profile', 'user')),
  );
  
  return system_settings_form($form);
}

/**
 * Module Override Settings Form
 */
function ms_authorizenet_custom_settings_form($form_state, $defaults, $override = FALSE) {
  
  $form['api_id_key'] = array(
    '#type' => 'fieldset',
    '#title' => t('API Login ID and Transaction Key'),
    '#description' => t('This information is required to interact with your payment gateway account.  It is different from your login ID and password and may be found through your account settings page.'),
  );
  $form['api_id_key']['ms_authorizenet_api_login_id'] = array(
    '#type' => 'textfield',
    '#title' => t('API Login ID'),
    '#default_value' => ($override) ? $defaults['api_id_key']['ms_authorizenet_api_login_id'] : variable_get('ms_authorizenet_api_login_id', ''),
  );
  $form['api_id_key']['ms_authorizenet_api_transaction_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction Key'),
    '#default_value' => ($override) ? $defaults['api_id_key']['ms_authorizenet_api_transaction_key'] : variable_get('ms_authorizenet_api_transaction_key', ''),
  );
  
  $form['aim_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('AIM settings'),
    '#description' => t('These settings pertain to the Authorize.Net AIM payment method for card not present transactions.'),
  );
  $form['aim_settings']['ms_authorizenet_aim_txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Only specify a developer test account if you login to your account through https://test.authorize.net.<br/>Adjust to live transactions when you are ready to start processing real payments.'),
    '#options' => array(
      'live' => t('Live transactions in a live account'),
      'live_test' => t('Test transactions in a live account'),
      'developer_test' => t('Developer test account transactions'),
    ),
    '#default_value' => ($override) ? $defaults['aim_settings']['ms_authorizenet_aim_txn_mode'] : variable_get('ms_authorizenet_aim_txn_mode', 'live_test'),
  );
  
  $form['aim_settings']['ms_authorizenet_aim_email_customer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tell Authorize.net to e-mail the customer a receipt based on your account settings.'),
    '#default_value' => ($override) ? $defaults['aim_settings']['ms_authorizenet_aim_email_customer'] : variable_get('ms_authorizenet_aim_email_customer', FALSE),
  );
  return $form;
}

// ======================================
// User Hooks
// ======================================
/**
 * Implementation of hook_user().
 */
function ms_authorizenet_user($type, &$edit, &$account, $category = NULL) {
  switch ($type) {
    case 'form':
      if ($category == 'ms_core_billing_info') {
        // Load the Payment Profile for this user
        $payment_profile = ms_authorizenet_get_payment_profile($account->uid);
        $cim_profile = ms_authorizenet_get_cim_profile($account->uid);
        if ($payment_profile->payment_id) {
          $form['ms_authorizenet_payment_profile_id'] = array(
            '#type' => 'value',
            '#value' => $payment_profile->payment_id,
          );
        }
        
        $form['uid'] = array(
          '#type' => 'value',
          '#value' => $account->uid,
        );
        
        $form['ms_authorizenet_card'] = array(
          '#type' => 'fieldset',
          '#title' => t('Credit Card Information'),
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
          '#description' => t('Please enter the new billing information you would like to use.'),
        );
        
        // Credit Card Info
        $form['ms_authorizenet_card']['cc_first_name'] = array(
          '#type' => 'textfield',
          '#title' => t('First Name'),
          '#size' => 80,
          '#maxlength' => 120,
          '#required' => TRUE,
          '#desription' => t('The First Name as it appears on the card.'),
          '#default_value' => $payment_profile->billToFirstName,
        );
        $form['ms_authorizenet_card']['cc_last_name'] = array(
          '#type' => 'textfield',
          '#title' => t('Last Name'),
          '#size' => 80,
          '#maxlength' => 120,
          '#required' => TRUE,
          '#desription' => t('The Last Name as it appears on the card.'),
          '#default_value' => $payment_profile->billToLastName,
        );
        $form['ms_authorizenet_card']['cc_number'] = array(
          '#type' => 'textfield',
          '#title' => t('Credit Card Number'),
          '#size' => 40,
          '#maxlength' => 20,
          '#description' => t("The Credit Card Number. This is encrypted for your safety. If you are not changing the credit card number, then you can leave it as it is."),
          '#required' => TRUE,
          '#default_value' => $payment_profile->cardNumber,
        );
        $form['ms_authorizenet_card']['cc_exp_month'] = array(
          '#type' => 'select',
          '#title' => t('Month'),
          '#options' => ms_core_get_months(),
          '#description' => t("The month this credit card expires."),
          '#default_value' => str_pad($payment_profile->expirationMonth, 2, 0, STR_PAD_LEFT),
          '#required' => TRUE,
        );
        $form['ms_authorizenet_card']['cc_exp_year'] = array(
          '#type' => 'select',
          '#title' => t('Year'),
          '#options' => ms_core_get_years(),
          '#description' => t("The year this credit card expires."),
          '#default_value' => $payment_profile->expirationYear,
          '#required' => TRUE,
        );
        
        $form['ms_authorizenet_billing'] = array(
          '#type' => 'fieldset',
          '#title' => t('Billing Info'),
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
        );
        
        // Billing Info
        $form['ms_authorizenet_billing']['billing_address1'] = array(
          '#type' => 'textfield',
          '#title' => t('Address Line 1'),
          '#size' => 80,
          '#required' => TRUE,
          '#default_value' => $payment_profile->billToAddress,
        );
        $form['ms_authorizenet_billing']['billing_city'] = array(
          '#type' => 'textfield',
          '#title' => t('City'),
          '#size' => 40,
          '#required' => TRUE,
          '#default_value' => $payment_profile->billToCity,
        );
        $form['ms_authorizenet_billing']['billing_state'] = array(
          '#type' => 'textfield',
          '#title' => t('State'),
          '#size' => 40,
          '#description' => t('Enter the 2 Letter Code for the State'),
          '#required' => TRUE,
          '#default_value' => $payment_profile->billToState,
        );
        $form['ms_authorizenet_billing']['billing_zip'] = array(
          '#type' => 'textfield',
          '#title' => t('Zip Code'),
          '#size' => 20,
          '#required' => TRUE,
          '#default_value' => $payment_profile->billToZip,
        );
        $form['ms_authorizenet_billing']['billing_country'] = array(
          '#type' => 'select',
          '#title' => t('Country'),
          '#options' => ms_core_get_countries('iso'),
          '#default_value' => 'US',
          '#required' => TRUE,
          '#default_value' => $payment_profile->billToCountry,
        );
        $form['ms_authorizenet_billing']['billing_phone'] = array(
          '#type' => 'textfield',
          '#title' => t('Phone Number'),
          '#size' => 40,
          '#required' => FALSE,
          '#default_value' => $payment_profile->billToPhoneNumber,
        );
        $form['ms_authorizenet_billing']['billing_email'] = array(
          '#type' => 'textfield',
          '#title' => t('Email'),
          '#size' => 40,
          '#required' => TRUE,
          '#default_value' => $cim_profile->email,
        );
        
        $form['#validate'][] = 'ms_core_cc_form_validate';
        $form['#validate'][] = 'ms_authorizenet_billing_info_form_validate';
        return $form;
      }
      break;
    
    case 'delete':
      //Remove the Records
      db_query('DELETE FROM {ms_authorizenet_cim_profiles} WHERE uid = %d', $account->uid);
      db_query('DELETE FROM {ms_authorizenet_payment_profiles} WHERE uid = %d', $account->uid);
      db_query('DELETE FROM {ms_authorizenet_shipping_profiles} WHERE uid = %d', $account->uid);
      
      return;
  }
}

/**
 * Submit Function for the Admin Edit User form
 */
function ms_authorizenet_billing_info_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  
  $account = user_load($v['uid']);
  
  $address = array(
    'first_name' => trim($v['cc_first_name']),
    'last_name' => trim($v['cc_last_name']),
    'address' => trim($v['billing_address1']),
    'city' => trim($v['billing_city']),
    'state' => trim($v['billing_state']),
    'zip' => trim($v['billing_zip']),
    'country' => trim($v['billing_country']),
    'phone' => trim($v['billing_phone']),
    'fax' => '',
  );
  
  // Update or Create the CIM Profile first
  if (!$cim_profile = ms_authorizenet_get_cim_profile($account->uid)) {
    $cim_profile = ms_authorizenet_create_cim_profile($v['billing_email'], $account->uid);
  }
  else { // If it exists, update it
    $cim_profile = ms_authorizenet_create_cim_profile($v['billing_email'], $account->uid, NULL, $cim_profile->profile_id);
  }
  
  if ($v['ms_authorizenet_payment_profile_id']) {
    // Load the Payment Profile. 
    $payment_profile = ms_authorizenet_get_payment_profile_by_id($v['ms_authorizenet_payment_profile_id']);
  }
  
  $payment_id = ($payment_profile->payment_id) ? $payment_profile->payment_id : 0;
  $shipping_profile = ms_authorizenet_get_shipping_profile($account->uid);
  $shipping_id = ($shipping_profile->shipping_id) ? $shipping_profile->shipping_id : 0;
  
  // If there is no Payment Profile, then create a new one, otherwise update the existing one
  $payment_result = ms_authorizenet_create_payment_profile($account->uid, $cim_profile->profile_id, $address, trim($v['cc_number']), trim($v['cc_exp_month']), trim($v['cc_exp_year']), $payment_id);
  $shipping_result = ms_authorizenet_create_shipping_profile($account->uid, $cim_profile->profile_id, $address, $shipping_id);
  
  if ($payment_result['success']) {
    // Set a message
    drupal_set_message(t('Your Billing Information has been successfully updated.'));
    // Send a confirmation email
    if (variable_get('ms_authorizenet_card_update_confirm_body', '')) {
      $vars = array(
        'payment_profile' => $payment_profile,
        );
      drupal_mail('ms_authorizenet', 'card_update_confirm', $account->mail, user_preferred_language($account), $vars);
    }
  }
  else {
    form_set_error('cc_number', t('Error: There was an error updating the payment profile. Please check your information and try again. Details: @details', array('@details' => $payment_result['error'])));
  }
}

/********************************************************************
 * FUNCTIONS
 *******************************************************************/ 

/**
 * Get the default payment profile for a user
 */
function ms_authorizenet_get_payment_profile($uid) {
  $result = db_query("SELECT * FROM {ms_authorizenet_payment_profiles} WHERE uid = %d", $uid);
  
  while ($payment_profile = db_fetch_object($result)) {
    return $payment_profile;
  }
  
  return FALSE;
}

/**
 * Get the default shipping profile for a user
 */
function ms_authorizenet_get_shipping_profile($uid) {
  $result = db_query("SELECT * FROM {ms_authorizenet_shipping_profiles} WHERE uid = %d", $uid);
  
  while ($shipping_profile = db_fetch_object($result)) {
    return $shipping_profile;
  }
  
  return FALSE;
}

/**
 * Get the profile for a user
 */
function ms_authorizenet_get_cim_profile($uid) {
  $result = db_query("SELECT * FROM {ms_authorizenet_cim_profiles} WHERE uid = %d", $uid);
  
  while ($profile = db_fetch_object($result)) {
    return $profile;
  }
  
  return FALSE;
}

/**
 * Get the default payment profile for a user
 */
function ms_authorizenet_get_payment_profile_by_id($payment_id) {
  $result = db_query("SELECT * FROM {ms_authorizenet_payment_profiles} WHERE payment_id = '%s'", $payment_id);
  
  while ($payment_profile = db_fetch_object($result)) {
    return $payment_profile;
  }
  
  return FALSE;
}

/**
 * Get the default shipping profile for a user
 */
function ms_authorizenet_get_shipping_profile_by_id($shipping_id) {
  $result = db_query("SELECT * FROM {ms_authorizenet_shipping_profiles} WHERE shipping_id = '%s'", $shipping_id);
  
  while ($shipping_profile = db_fetch_object($result)) {
    return $shipping_profile;
  }
  
  return FALSE;
}

/**
 * Get the profile for a user
 */
function ms_authorizenet_get_cim_profile_by_id($profile_id) {
  $result = db_query("SELECT * FROM {ms_authorizenet_cim_profiles} WHERE profile_id = '%s'", $profile_id);
  
  while ($profile = db_fetch_object($result)) {
    return $profile;
  }
  
  return FALSE;
}

/**
 * Get the payment profiles for a user
 */
function ms_authorizenet_get_payment_profiles($uid) {
  $payment_profiles = array();
  $result = db_query("SELECT * FROM {ms_authorizenet_payment_profiles} WHERE uid = %d", $uid);
  
  while ($payment_profile = db_fetch_object($result)) {
    $payment_profiles[$payment_profile->payment_id] = t('Credit Card: @number', array('@number' => $payment_profile->cardNumber));
  }
  
  return $payment_profiles;
}

/**
 * Get the shipping profiles for a user
 */
function ms_authorizenet_get_shipping_profiles($uid) {
  $shipping_profiles = array();
  $result = db_query("SELECT * FROM {ms_authorizenet_shipping_profiles} WHERE uid = %d", $uid);
  
  while ($shipping_profile = db_fetch_object($result)) {
    $shipping_profiles[$shipping_profile->shipping_id] = t('Address: @address', array('@address' => $shipping_profile->shipToAddress));
  }
  
  return $shipping_profiles;
}

/**
 * Create a CIM Profile
 */
function ms_authorizenet_create_cim_profile($email, $uid, $description = NULL, $id = 0) {
  if (!$description) {
    $description = variable_get('site_name', 'drupal');
  }
  
  // Include AuthnetCIM class
  require_once('includes/AuthnetCIM.class.php');
  if (!$profile = ms_authorizenet_get_cim_profile_by_id($id)) {
    $profile = new stdClass();
    $profile->email = $email;
    $profile->description = $description;
    $profile->uid = $uid;
  }
  // Create AuthnetCIM object
  $isTest = (variable_get('ms_authorizenet_cim_mode', 'disabled') == 'developer') ? TRUE : FALSE;
  $cim = new AuthnetCIM(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''), $isTest);
  
  // Create the profile
  $cim->setParameter('email', $profile->email);
  $cim->setParameter('description', $profile->description);
  $cim->setParameter('merchantCustomerId', $profile->uid);
  
  if ($profile->id) {
    $cim->setParameter('customerProfileId', $profile->profile_id);
    $cim->updateCustomerProfile();
    // Get the profile ID returned from the request
    if ($cim->isSuccessful()) {
      if (variable_get('ms_core_debug_mode', FALSE)) {  
        watchdog('ms_authorizenet', 'Updating a CIM profile');
      }
      drupal_write_record('ms_authorizenet_cim_profiles', $profile, 'id');
      if (variable_get('ms_core_debug_mode', FALSE)) {  
        watchdog('ms_authorizenet', 'Successfully Updated a CIM Profile: !profile', 
          array('!profile' => '<pre>'. print_r($profile, TRUE) .'</pre>'));
      }
      return $profile;
    }
    else {
      watchdog('ms_authorizenet', 'There was an error updating the CIM Profile.', array(), WATCHDOG_ERROR);
      return FALSE;
    }
  }
  else {
    $cim->createCustomerProfile();
    // Get the profile ID returned from the request
    if ($cim->isSuccessful()) {
      if (variable_get('ms_core_debug_mode', FALSE)) {  
        watchdog('ms_authorizenet', 'Creating a new CIM profile');
      }
      $profile->profile_id = $cim->getProfileID();
      drupal_write_record('ms_authorizenet_cim_profiles', $profile);
      if (variable_get('ms_core_debug_mode', FALSE)) {  
        watchdog('ms_authorizenet', 'Successfully Created a CIM Profile: !profile', 
          array('!profile' => '<pre>'. print_r($profile, TRUE) .'</pre>'));
      }
      return $profile;
    }
    else {
      watchdog('ms_authorizenet', 'There was an error creating the CIM Profile.', array(), WATCHDOG_ERROR);
      return FALSE;
    }
  }
}

/**
 * Create a CIM Payment Profile
 */
function ms_authorizenet_create_payment_profile($uid, $profile_id, $address, $card_num, $month, $year, $payment_id = 0) {
  // Include AuthnetCIM class
  require_once('includes/AuthnetCIM.class.php');
  
  if (!$payment_profile = ms_authorizenet_get_payment_profile_by_id($payment_id)) {
    $payment_profile = new stdClass();
  }
  
  $payment_profile->uid = $uid;
  $payment_profile->status = 1;
  $payment_profile->profile_id = $profile_id;
  $payment_profile->billToFirstName = $address['first_name'];
  $payment_profile->billToLastName = $address['last_name'];
  $payment_profile->billToAddress = $address['address'];
  $payment_profile->billToCity = $address['city'];
  $payment_profile->billToState = $address['state'];
  $payment_profile->billToZip = $address['zip'];
  $payment_profile->billToCountry = $address['country'];
  $payment_profile->billToPhoneNumber = $address['phone'];
  $payment_profile->billToFaxNumber = $address['fax'];
  $payment_profile->cardNumber = $card_num;
  $payment_profile->expirationMonth = $month;
  $payment_profile->expirationYear = $year;
  
  // Create AuthnetCIM object
  $isTest = (variable_get('ms_authorizenet_cim_mode', 'disabled') == 'developer') ? TRUE : FALSE;
  $cim = new AuthnetCIM(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''), $isTest);

  // Create the Payment Profile
  $cim->setParameter('customerProfileId', $payment_profile->profile_id);
  $cim->setParameter('billToFirstName', $payment_profile->billToFirstName);
  $cim->setParameter('billToLastName', $payment_profile->billToLastName);
  $cim->setParameter('billToAddress', $payment_profile->billToAddress);
  $cim->setParameter('billToCity', $payment_profile->billToCity);
  $cim->setParameter('billToState', $payment_profile->billToState);
  $cim->setParameter('billToZip', $payment_profile->billToZip);
  $cim->setParameter('billToCountry', $payment_profile->billToCountry);
  if ($payment_profile->billToPhoneNumber) {
    $cim->setParameter('billToPhoneNumber', $payment_profile->billToPhoneNumber);
  }
  if ($payment_profile->billToFaxNumber) {
    $cim->setParameter('billToFaxNumber', $payment_profile->billToFaxNumber);
  }
  $cim->setParameter('cardNumber', $payment_profile->cardNumber);
  $cim->setParameter('expirationDate', $payment_profile->expirationYear .'-'. str_pad($payment_profile->expirationMonth, 2, 0, STR_PAD_LEFT));
  
  // Hide the numbers before writing it to the database
  $payment_profile->cardNumber = ms_core_mask_cc($payment_profile->cardNumber);
  
  if ($payment_profile->id) {
    $cim->setParameter('customerPaymentProfileId', $payment_profile->payment_id);
    $cim->updateCustomerPaymentProfile();
    // Get the payment profile ID returned from the request
    if ($cim->isSuccessful()) {
      if (variable_get('ms_core_debug_mode', FALSE)) {  
        watchdog('ms_authorizenet', 'Successfully updated a CIM Payment Profile');
      }
      
      drupal_write_record('ms_authorizenet_payment_profiles', $payment_profile, 'id');
      
      return array('success' => TRUE, 'payment_profile' => $payment_profile);
    }
    else {
      watchdog('ms_authorizenet', 'There was an error updating the CIM Payment Profile: !error Profile: !profile', 
        array('!error' => $cim->getResponseSummary(), '!profile' => '<pre>'. print_r($payment_profile, TRUE) .'</pre>'), WATCHDOG_ERROR);
      return array('success' => FALSE, 'error' => $cim->getResponse());
    }
  }
  else {
    $cim->createCustomerPaymentProfile();
    // Get the payment profile ID returned from the request
    if ($cim->isSuccessful()) {
      if (variable_get('ms_core_debug_mode', FALSE)) {  
        watchdog('ms_authorizenet', 'Creating a new CIM Payment Profile');
      }
      $payment_profile->payment_id = $cim->getPaymentProfileId();
      drupal_write_record('ms_authorizenet_payment_profiles', $payment_profile);
      return array('success' => TRUE, 'payment_profile' => $payment_profile);
    }
    else {
      watchdog('ms_authorizenet', 'There was an error creating the CIM Payment Profile: !error Profile: !profile', 
        array('!error' => $cim->getResponseSummary(), '!profile' => '<pre>'. print_r($payment_profile, TRUE) .'</pre>'), WATCHDOG_ERROR);
      return array('success' => FALSE, 'error' => $cim->getResponse());
    }
  }
}

/**
 * Create a CIM Shipping Profile
 */
function ms_authorizenet_create_shipping_profile($uid, $profile_id, $address, $shipping_id = 0) {
  // Include AuthnetCIM class
  require_once('includes/AuthnetCIM.class.php');
  
  if (!$shipping_profile = ms_authorizenet_get_shipping_profile_by_id($shipping_id)) {
    $shipping_profile = new stdClass();
  }
  
  $shipping_profile->uid = $uid;
  $shipping_profile->status = 1;
  $shipping_profile->profile_id = $profile_id;
  $shipping_profile->shipToFirstName = $address['first_name'];
  $shipping_profile->shipToLastName = $address['last_name'];
  $shipping_profile->shipToAddress = $address['address'];
  $shipping_profile->shipToCity = $address['city'];
  $shipping_profile->shipToState = $address['state'];
  $shipping_profile->shipToZip = $address['zip'];
  $shipping_profile->shipToCountry = $address['country'];
  $shipping_profile->shipToPhoneNumber = $address['phone'];
  $shipping_profile->shipToFaxNumber = $address['fax'];
  
  // Create AuthnetCIM object
  $isTest = (variable_get('ms_authorizenet_cim_mode', 'disabled') == 'developer') ? TRUE : FALSE;
  $cim = new AuthnetCIM(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''), $isTest);

  // Create the Payment Profile
  $cim->setParameter('customerProfileId', $shipping_profile->profile_id);
  $cim->setParameter('shipToFirstName', $shipping_profile->shipToFirstName);
  $cim->setParameter('shipToLastName', $shipping_profile->shipToLastName);
  $cim->setParameter('shipToAddress', $shipping_profile->shipToAddress);
  $cim->setParameter('shipToCity', $shipping_profile->shipToCity);
  $cim->setParameter('shipToState', $shipping_profile->shipToState);
  $cim->setParameter('shipToZip', $shipping_profile->shipToZip);
  $cim->setParameter('shipToCountry', $shipping_profile->shipToCountry);
  if ($shipping_profile->shipToPhoneNumber) {
    $cim->setParameter('shipToPhoneNumber', $shipping_profile->shipToPhoneNumber);
  }
  if ($shipping_profile->shipToFaxNumber) {
    $cim->setParameter('shipToFaxNumber', $shipping_profile->shipToFaxNumber);
  }
  
  if ($shipping_profile->id) {
    $cim->setParameter('customerAddressId', $shipping_profile->shipping_id);
    $cim->updateCustomerShippingAddress();
    if ($cim->isSuccessful()) {
      $shipping_profile->shipping_id = $cim->getCustomerAddressId();
      drupal_write_record('ms_authorizenet_shipping_profiles', $shipping_profile, 'id');
      return array('success' => TRUE, 'shipping_profile' => $shipping_profile);
    }
    else {
      watchdog('ms_authorizenet', 'There was an error updating the CIM Shipping Profile: !error Profile: !profile', 
        array('!error' => $cim->getResponseSummary(), '!profile' => '<pre>'. print_r($shipping_profile, TRUE) .'</pre>'), WATCHDOG_ERROR);
      return array('success' => FALSE, 'error' => $cim->getResponse());
    }
  }
  else {
    $cim->createCustomerShippingAddress();
    
    if ($cim->isSuccessful()) {
      $shipping_profile->shipping_id = $cim->getCustomerAddressId();
      drupal_write_record('ms_authorizenet_shipping_profiles', $shipping_profile);
      return array('success' => TRUE, 'shipping_profile' => $shipping_profile);
    }
    else {
      watchdog('ms_authorizenet', 'There was an error creating the CIM Shipping Profile: !error Profile: !profile', 
        array('!error' => $cim->getResponseSummary(), '!profile' => '<pre>'. print_r($shipping_profile, TRUE) .'</pre>'), WATCHDOG_ERROR);
      return array('success' => FALSE, 'error' => $cim->getResponse());
    }
  }
}

/**
 * Create the profiles from an order
 */
function ms_authorizenet_create_cim_profiles_from_order($order, $v) {
  $account = user_load($order->uid);
  if ($account->uid) {
    if (!$profile = ms_authorizenet_get_cim_profile($account->uid)) {
      $profile = ms_authorizenet_create_cim_profile($v['billing_email'], $account->uid);
    }
    $address = array(
      'first_name' => trim($v['cc_first_name']),
      'last_name' => trim($v['cc_last_name']),
      'address' => trim($v['billing_address1']),
      'city' => trim($v['billing_city']),
      'state' => trim($v['billing_state']),
      'zip' => trim($v['billing_zip']),
      'country' => trim($v['billing_country']),
      'phone' => trim($v['billing_phone']),
      'fax' => '',
    );
    $payment_result = ms_authorizenet_create_payment_profile($account->uid, $profile->profile_id, $address, trim($v['cc_number']), trim($v['cc_exp_month']), trim($v['cc_exp_year']));
    $shipping_result = ms_authorizenet_create_shipping_profile($account->uid, $profile->profile_id, $address);
  }
}

/**
 * Implementation of hook_ms_payment_gateway
 */
function ms_authorizenet_ms_payment_gateway() {
  $gateways[] = array(
    'name' => 'Authorize.net',
    'description' => 'Pay with a Credit Card',
    'module' => 'ms_authorizenet',
    'path' => 'ms/checkout/authorize',
    'cancel_url' => 'ms_authorizenet_get_arb_cancel_url',
    'modify_url' => '',
    'billing_url' => 'ms_authorizenet_get_arb_billing_url',
    'recurring' => TRUE,
    'cart' => TRUE,
    );
  $gateways[] = array(
    'name' => 'Authorize.net CIM',
    'description' => 'Pay with a Credit Card',
    'module' => 'ms_authorizenet_cim',
    'path' => 'ms/checkout/authorize',
    'requires' => 'Requires Authorize.net Gateway',
    'cancel_url' => 'ms_authorizenet_get_cim_cancel_url',
    'modify_url' => 'ms_authorizenet_get_cim_modify_url',
    'billing_url' => 'ms_authorizenet_get_cim_billing_url',
    'recurring' => FALSE,
    'cart' => FALSE,
    );
  
  return $gateways;
}

/**
 * Get the Cancellation URL for a recurring order for ARB
 */
function ms_authorizenet_get_arb_billing_url($order) {
  return 'ms_authorizenet_arb/billing/'. $order->oid;
}

/**
 * Initiate a cancellation for ARB
 */
function ms_authorizenet_arb_billing_page($oid) {
  if ($order = ms_core_order_load($oid)) {
    return drupal_get_form('ms_authorizenet_arb_billing_page_form', $order);
  }
  
  return t('There was an error.');
}

/**
 * Initiate a cancellation for ARB
 */
function ms_authorizenet_arb_billing_page_form(&$form_state, $order) {
  $form['oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );
  
  $form['ms_authorizenet_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit Card Information'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t('Please enter the new billing information you would like to use.'),
  );
  
  // FIXME - Create a database table to store the authorize.net ARB subscription billing info so it can be retrieved here
  
  // Credit Card Info
  $form['ms_authorizenet_card']['cc_first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#size' => 80,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#desription' => t('The First Name as it appears on the card.'),
    '#default_value' => $payment_profile->billToFirstName,
  );
  $form['ms_authorizenet_card']['cc_last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#size' => 80,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#desription' => t('The Last Name as it appears on the card.'),
    '#default_value' => $payment_profile->billToLastName,
  );
  $form['ms_authorizenet_card']['cc_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Card Number'),
    '#size' => 40,
    '#maxlength' => 20,
    '#description' => t("The Credit Card Number. This is encrypted for your safety. You must enter the full card number if you are making any changes."),
    '#required' => TRUE,
    '#default_value' => $payment_profile->cardNumber,
  );
  $form['ms_authorizenet_card']['cc_exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Month'),
    '#options' => ms_core_get_months(),
    '#description' => t("The month this credit card expires."),
    '#default_value' => str_pad($payment_profile->expirationMonth, 2, 0, STR_PAD_LEFT),
    '#required' => TRUE,
  );
  $form['ms_authorizenet_card']['cc_exp_year'] = array(
    '#type' => 'select',
    '#title' => t('Year'),
    '#options' => ms_core_get_years(),
    '#description' => t("The year this credit card expires."),
    '#default_value' => $payment_profile->expirationYear,
    '#required' => TRUE,
  );
  
  $form['ms_authorizenet_billing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Billing Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  
  // Billing Info
  $form['ms_authorizenet_billing']['billing_address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address Line 1'),
    '#size' => 80,
    '#required' => TRUE,
    '#default_value' => $payment_profile->billToAddress,
  );
  $form['ms_authorizenet_billing']['billing_city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#size' => 40,
    '#required' => TRUE,
    '#default_value' => $payment_profile->billToCity,
  );
  $form['ms_authorizenet_billing']['billing_state'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#size' => 40,
    '#description' => t('Enter the 2 Letter Code for the State'),
    '#required' => TRUE,
    '#default_value' => $payment_profile->billToState,
  );
  $form['ms_authorizenet_billing']['billing_zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Code'),
    '#size' => 20,
    '#required' => TRUE,
    '#default_value' => $payment_profile->billToZip,
  );
  $form['ms_authorizenet_billing']['billing_country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => ms_core_get_countries('iso'),
    '#default_value' => 'US',
    '#required' => TRUE,
    '#default_value' => $payment_profile->billToCountry,
  );
  $form['ms_authorizenet_billing']['billing_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone Number'),
    '#size' => 40,
    '#required' => FALSE,
    '#default_value' => $payment_profile->billToPhoneNumber,
  );
  $form['ms_authorizenet_billing']['billing_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => 40,
    '#required' => TRUE,
    '#default_value' => $cim_profile->email,
  );
  
  $form['#validate'][] = 'ms_core_cc_form_validate';
  $form['#validate'][] = 'ms_authorizenet_arb_billing_page_form_validate';
  
  $form['#redirect'] = ($_GET['destination']) ? $_GET['destination'] : '';
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  return $form;
}

/**
 * Initiate a cancellation for ARB
 */
function ms_authorizenet_arb_billing_page_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  
  $order = ms_core_order_load($v['oid']);
  
  $account = user_load($order->uid);
  
  require_once('includes/AuthnetARB.class.php');
  
  if (variable_get('ms_authorizenet_arb_mode', 'disabled') == 'developer') {
    $arb = new AuthnetARB(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''), AuthnetARB::USE_DEVELOPMENT_SERVER);
  }
  else {
    $arb = new AuthnetARB(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''));
  }
  
  // Get the subscription_id from the order
  $subscription_id = ms_core_get_order_rec_id($order->oid);
  
  $arb->setParameter('subscrId', $subscription_id);
  $arb->setParameter('cardNumber', $v['cc_number']);
  $arb->setParameter('expirationDate', $v['cc_exp_year'] .'-'. $v['cc_exp_month']);
  $arb->setParameter('firstName', $v['cc_first_name']);
  $arb->setParameter('lastName', $v['cc_last_name']);
  $arb->setParameter('address', $v['billing_address1']);
  $arb->setParameter('city', $v['billing_city']);
  $arb->setParameter('state', $v['billing_state']);
  $arb->setParameter('zip', $v['billing_zip']);
  $arb->setParameter('email', $v['billing_email']);
  
  //$arb->setParameter('subscrName', ms_core_get_order_title($order));
  $arb->setParameter('amount', $order->recurring_schedule['main_amount']);
  //$arb->setParameter('trialAmount', $order->recurring_schedule['trial_amount']);
  $arb->updateAccount();
  
  if ($arb->isSuccessful()) {
    drupal_set_message(t('Successfully changed your billing information.'));
  }
  else {
    // Log the error
    watchdog('ms_authorizenet', 'There was a problem updating the order: @error', 
      array('@error' => $arb->getResponse()), WATCHDOG_ERROR);
    form_set_error('cc_number', t('Error: @error', array('@error' => $arb->getResponse())));
  }
}

/**
 * Get the Cancellation URL for a recurring order for ARB
 */
function ms_authorizenet_get_arb_cancel_url($order) {
  return 'ms_authorizenet_arb/cancel/'. $order->oid;
}

/**
 * Initiate a cancellation for ARB
 */
function ms_authorizenet_cancel_arb_page($oid) {
  // Enter a rec_cancel payment
  $order = ms_core_order_load($oid);
  
  require_once('includes/AuthnetARB.class.php');
  
  if (variable_get('ms_authorizenet_arb_mode', 'disabled') == 'developer') {
    $arb = new AuthnetARB(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''), AuthnetARB::USE_DEVELOPMENT_SERVER);
  }
  else {
    $arb = new AuthnetARB(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''));
  }
  
  // Get the subscription_id from the order
  $subscription_id = ms_core_get_order_rec_id($order->oid);
  $arb->setParameter('subscrId', $subscription_id);
  $arb->deleteAccount();
  
  if ($arb->isSuccessful()) {
    // Enter the rec_cancel payment
    $payment = new stdClass();
    $payment->oid = $order->oid;
    $payment->gateway = 'ms_authorizenet';
    $payment->type = 'rec_cancel';
    // Generate a Unique Transaction ID
    $payment->transaction = drupal_get_token(serialize($order));
    $payment->amount = 0;
    $payment->currency = 'USD';
    $payment->recurring_schedule = $new_product->recurring_schedule;
    $payment->recurring_id = $arb->getSubscriberID();
    $payment->billing_address = $order->billing_address;
    $payment->shipping_address = $order->shipping_address;
    $payment->full_name = $order->full_name;
    
    ms_core_enter_payment($payment, FALSE);
    
    $redirect = ($_GET['destination']) ? $_GET['destination'] : '';
    drupal_goto($redirect);
  }
  else {
    // Log the error
    watchdog('ms_authorizenet', 'There was a problem processing the payment: @error', 
      array('@error' => $arb->getResponse()), WATCHDOG_ERROR);
    
    $redirect = ($_GET['destination']) ? $_GET['destination'] : '';
    drupal_goto($redirect);
  }
}

/**
 * Get the Modification URL for a recurring order for ARB
 */
function ms_authorizenet_get_arb_modify_url($order, $id) {
  return 'ms_authorizenet_arb/modify/'. $order->oid .'/'. $id;
}

/**
 * Initiate a modification for ARB
 */
function ms_authorizenet_modify_arb_page($oid, $id) {
  // FIXME - The user must enter their billing details again
  // Enter a rec_cancel payment
  $order = ms_core_order_load($oid);
  $products = ms_core_load_module_product(ms_core_get_order_module($order), $id);
  
  $new_product = $products[0];
  
  $data['new_product'] = $new_product;
  
  $order = ms_core_add_data($order, $data);
  
  require_once('includes/AuthnetARB.class.php');
  
  if (variable_get('ms_authorizenet_arb_mode', 'disabled') == 'developer') {
    $arb = new AuthnetARB(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''), AuthnetARB::USE_DEVELOPMENT_SERVER);
  }
  else {
    $arb = new AuthnetARB(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''));
  }
  
  // Get the subscription_id from the order
  $subscription_id = ms_core_get_order_rec_id($order->oid);
  $arb->setParameter('subscrId', $subscription_id);
  
  // Update the Recurring Schedule of the ARB record
  
  // Setup variables for the payment schedule.
  $length = $new_product->recurring_schedule['main_length'];
  $unit = $new_product->recurring_schedule['main_unit'];
    
  // Convert weeks and years to days.
  if ($unit == 'W') {
    $length *= 7;
    $unit = 'D';
  }
  elseif ($unit == 'Y') {
    $length *= 365;
    $unit = 'D';
  }
  
  switch ($unit) {
    case 'D':
      $unit = 'days';
    break;
    case 'M':
      $unit = 'months';
    break;
  }
  
  $arb->setParameter('amount', round($new_product->recurring_schedule['main_amount'], 2));
  $arb->setParameter('interval_length', $length);
  $arb->setParameter('interval_unit', $unit);
  $arb->setParameter('startDate', date("Y-m-d"));
  
  $arb->updateAccount();
  
  if ($arb->isSuccessful()) {
    // Enter the rec_cancel payment
    $payment = new stdClass();
    $payment->oid = $order->oid;
    $payment->gateway = 'ms_authorizenet';
    $payment->type = 'rec_modify';
    // Generate a Unique Transaction ID
    $payment->transaction = drupal_get_token(serialize($order));
    $payment->recurring_id = $arb->getSubscriberID();
    $payment->amount = 0;
    $payment->currency = 'USD';
    $payment->data = array('new_product' => $new_product);
    $payment->recurring_schedule = $new_product->recurring_schedule;
    $payment->billing_address = $order->billing_address;
    $payment->shipping_address = $order->shipping_address;
    $payment->full_name = $order->full_name;
    
    ms_core_enter_payment($payment, FALSE);
    
    $redirect = ($_GET['destination']) ? $_GET['destination'] : '';
    drupal_goto($redirect);
  }
  else {
    // Log the error
    watchdog('ms_authorizenet', 'There was a problem processing the payment: @error', 
      array('@error' => $arb->getResponse()), WATCHDOG_ERROR);
    
    $redirect = ($_GET['destination']) ? $_GET['destination'] : '';
    drupal_goto($redirect);
  }
}

/**
 * Get the Cancellation URL for a recurring order for ARB
 */
function ms_authorizenet_get_cim_billing_url($order) {
  return 'user/'. $order->uid .'/edit/ms_core_billing_info';
}

/**
 * Get the Cancellation URL for a recurring order for CIM
 */
function ms_authorizenet_get_cim_cancel_url($order) {
  return 'ms_authorizenet_cim/cancel/'. $order->oid;
}

/**
 * Initiate a cancellation for CIM
 */
function ms_authorizenet_cancel_cim_page($oid) {
  return drupal_get_form('ms_authorizenet_cancel_cim_confirm', $oid);
}

/**
 * Initiate a cancellation for CIM
 */
function ms_authorizenet_cancel_cim_confirm(&$form_state, $oid) {
  $order = ms_core_order_load($oid);
  $form['#ms_core_oid'] = $order->oid;
  $redirect = ($_GET['destination']) ? $_GET['destination'] : '';
  return confirm_form($form, t('Are you sure you want to cancel your order?'), $redirect, t('This action cannot be undone.'), t('Confirm'));
}

function ms_authorizenet_cancel_cim_confirm_submit($form, &$form_state) {
  $order = ms_core_order_load($form['#ms_core_oid']);
  
  // Enter the rec_cancel payment
  $payment = new stdClass();
  $payment->oid = $order->oid;
  $payment->gateway = 'ms_authorizenet_cim';
  $payment->type = 'rec_cancel';
  // Generate a Unique Transaction ID
  $payment->transaction = drupal_get_token(serialize($order));
  $payment->amount = 0;
  $payment->currency = 'USD';
  $payment->recurring_schedule = $order->recurring_schedule;
  $payment->billing_address = $order->billing_address;
  $payment->shipping_address = $order->shipping_address;
  $payment->full_name = $order->full_name;
  $payment->recurring_id = $order->oid;
  
  ms_core_enter_payment($payment, FALSE);
  
  $redirect = ($_GET['destination']) ? $_GET['destination'] : '';
  $form_state['redirect'] = $redirect;
}

/**
 * Get the Modification URL for a recurring order for CIM
 */
function ms_authorizenet_get_cim_modify_url($order, $id) {
  return 'ms_authorizenet_cim/modify/'. $order->oid .'/'. $id;
}

/**
 * Initiate a modification for CIM
 */
function ms_authorizenet_modify_cim_page($oid, $id) {
  // Enter a rec_cancel payment
  $order = ms_core_order_load($oid);
  $products = ms_core_load_module_product(ms_core_get_order_module($order), $id);
  
  $new_product = $products[0];
  
  $data['new_product'] = $new_product;
  
  $order = ms_core_add_data($order, $data);
  
  // Enter the rec_cancel payment
  $payment = new stdClass();
  $payment->oid = $order->oid;
  $payment->gateway = 'ms_authorizenet_cim';
  $payment->type = 'rec_modify';
  // Generate a Unique Transaction ID
  $payment->transaction = drupal_get_token(serialize($order));
  $payment->amount = 0;
  $payment->currency = 'USD';
  $payment->data = array('new_product' => $new_product);
  $payment->recurring_schedule = $new_product->recurring_schedule;
  $payment->billing_address = $order->billing_address;
  $payment->shipping_address = $order->shipping_address;
  $payment->full_name = $order->full_name;
  $payment->recurring_id = $order->oid;
  
  ms_core_enter_payment($payment, FALSE);
  
  $redirect = ($_GET['destination']) ? $_GET['destination'] : '';
  drupal_goto($redirect);
}

/**
 * Implementation of hook_ms_product_override
 */
function ms_authorizenet_ms_product_override() {
  $modules[] = array(
    'name' => 'Authorize.net',
    'module' => 'ms_authorizenet',
    'type' => array('all'),
    'settings_form' => 'ms_authorizenet_custom_settings_form',
  );
  
  return $modules;
}

/********************************************************************
 * Checkout Form
 *******************************************************************/ 

/*
 * Make a form to show on the checkout page, to collect the CC and Address Info
 * Then in the submit function, submit the info to the payment gateway. If it is successful, then go to thankyou page
 */ 
function ms_authorizenet_checkout() {
  $html = '';
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;
  
  $mode = variable_get('ms_authorizenet_aim_txn_mode', 'live_test');
  $arb_mode = variable_get('ms_authorizenet_arb_mode', 'disabled');
  if ($mode == 'live_test' OR $mode == 'developer_test') {
    drupal_set_message(t('Using Test Mode. Cards will not be charged.'));
  }
  
  global $user;
  
  if (!$order = ms_core_load_session_order()) {
    // Error
    return t('There was an error with the checkout');
  }
  
  if ($order->status != 'checkout') {
    // The order is not in checkout and shouldn't be here
    return t('This order has already been through Checkout.');
  }
  
  // Check if the user has a saved payment profile
  if ($user->uid AND $profile = ms_authorizenet_get_cim_profile($user->uid) AND $payment_profile = ms_authorizenet_get_payment_profile($user->uid) AND $shipping_profile = ms_authorizenet_get_shipping_profile($user->uid)) {
    // Show the form to use the saved profile
    $html .= drupal_get_form('ms_authorizenet_cim_checkout_form', $user, $order);
  }
  else {
    // Get the Payment Form
    $html .= drupal_get_form('ms_authorizenet_checkout_form', $order);
  }
  
  return $html;
}

/*
 * Build the CIM Form
 */ 
function ms_authorizenet_cim_checkout_form($form_state, $account, $order) {
  $payment_profiles = ms_authorizenet_get_payment_profiles($account->uid);
  $shipping_profiles = ms_authorizenet_get_shipping_profiles($account->uid);
  
  $form['ms_order_contents'] = array(
    '#type' => 'markup',
    '#value' => ms_core_get_order_details_table($order),
  );
  
  $form['payment_id'] = array(
    '#type' => 'radios',
    '#title' => 'Payment Method',
    '#options' => $payment_profiles,
    '#description' => t("Select which method you'd like to use to pay for this purchase."),
    '#default_value' => key($payment_profiles),
    '#required' => TRUE,
  );
  
  $form['shipping_id'] = array(
    '#type' => 'radios',
    '#title' => 'Shipping Address',
    '#options' => $shipping_profiles,
    '#default_value' => key($shipping_profiles),
    '#description' => t("Select which shipping address you'd like to use for this purchase."),
    '#required' => TRUE,
  );
  
  $form['ms_oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay Now'),
  );
  
  return $form;
}

/*
 * Validate the Checkout Form, and Try to Charge the Card from the CIM Profile
 */ 
function ms_authorizenet_cim_checkout_form_validate($form, &$form_state) {
  $form_values = $form_state['values'];
  
  $order = ms_core_order_load($form_values['ms_oid']);
  $account = user_load($order->uid);
  $payment_profile = ms_authorizenet_get_payment_profile_by_id($form_values['payment_id']);
  $shipping_profile = ms_authorizenet_get_shipping_profile_by_id($form_values['shipping_id']);
  $profile = ms_authorizenet_get_cim_profile($account->uid);
  
  switch ($order->order_type) {
    case 'recurring':
      // Check if there is a free trial
      if ($order->recurring_schedule['trial_length'] AND !$order->recurring_schedule['trial_amount']) {
        // Just insert a rec_signup payment without charging
        // Insert the Payment to the database for the Free Trial
        $payment = new stdClass();
        $payment->oid = $order->oid;
        $payment->gateway = 'ms_authorizenet_cim';
        $payment->type = 'rec_signup';
        // Generate a Unique Transaction ID
        $payment->transaction = drupal_get_token(serialize($order));
        $payment->amount = 0;
        $payment->currency = 'USD';
        $payment->data = $payment_profile;
        $payment->recurring_schedule = $order->recurring_schedule;
        
        // Update the address
        $payment->billing_address = array(
          'street' => $payment_profile->billToAddress,
          'city' => $payment_profile->billToCity,
          'state' => $payment_profile->billToState,
          'zip' => $payment_profile->billToZip,
          'country' => $payment_profile->billToCountry,
          'phone' => $payment_profile->billToPhoneNumber,
          );
        $payment->shipping_address = array(
          'street' => $shipping_profile->shipToAddress,
          'city' => $shipping_profile->shipToCity,
          'state' => $shipping_profile->shipToState,
          'zip' => $shipping_profile->shipToZip,
          'country' => $shipping_profile->shipToCountry,
          'phone' => $shipping_profile->shipToPhoneNumber,
          );
        // Update the contact details
        $payment->full_name = $payment_profile->billToFirstName .' '. $payment_profile->billToLastName;
        $payment->recurring_id = $order->oid;
        
        // Add the Payment to the Order
        ms_core_enter_payment($payment, FALSE);
        
        // Add the payment to the order
        $form_state['values']['ms_oid'] = $order->oid;
        $form_state['values']['ms_order_charged'] = TRUE;
      }
      else {
        // Check if there is a trial
        $amount = ($order->recurring_schedule['trial_length']) ? $order->recurring_schedule['trial_amount'] : $order->recurring_schedule['main_amount'];
        
        // Charge the first payment, and enter rec_signup and rec_payment
        $response = ms_authorizenet_cim_charge($order, $amount, $profile, $payment_profile, $shipping_profile);
        
        if ($response['approved']) {
          // Add the payment to the order
          $form_state['values']['ms_oid'] = $order->oid;
          $form_state['values']['ms_order_charged'] = TRUE;
          
          // Insert the rec_signup Payment to the database
          $payment = new stdClass();
          $payment->oid = $order->oid;
          $payment->gateway = 'ms_authorizenet_cim';
          $payment->type = 'rec_signup';
          $payment->transaction = $response['data']['auth_code'];
          $payment->amount = 0;
          $payment->currency = 'USD';
          $payment->data = $response['data'];
          $payment->recurring_schedule = $order->recurring_schedule;
          
          // Update the address
          $payment->billing_address = array(
            'street' => $payment_profile->billToAddress,
            'city' => $payment_profile->billToCity,
            'state' => $payment_profile->billToState,
            'zip' => $payment_profile->billToZip,
            'country' => $payment_profile->billToCountry,
            'phone' => $payment_profile->billToPhoneNumber,
            );
          $payment->shipping_address = array(
            'street' => $shipping_profile->shipToAddress,
            'city' => $shipping_profile->shipToCity,
            'state' => $shipping_profile->shipToState,
            'zip' => $shipping_profile->shipToZip,
            'country' => $shipping_profile->shipToCountry,
            'phone' => $shipping_profile->shipToPhoneNumber,
            );
          // Update the contact details
          $payment->full_name = $payment_profile->billToFirstName .' '. $payment_profile->billToLastName;
          $payment->recurring_id = $order->oid;
          
          // Add the Payment to the Order
          ms_core_enter_payment($payment, FALSE);
          
          // Add the rec_payment payment to the order
          $payment->type = 'rec_payment';
          $payment->amount = $amount;
          ms_core_enter_payment($payment, FALSE);
        }
        else {
          // Log the error
          watchdog('ms_authorizenet', 'Error Processing CIM Charge: @message', array('@message' => $response['message']), WATCHDOG_ERROR);
        }
      }
    break;
    
    case 'cart':
      $response = ms_authorizenet_cim_charge($order, $order->amount, $profile, $payment_profile, $shipping_profile);
      
      // Get the payment profile ID returned from the request
      if ($response['approved']) {
        // Add the payment to the order
        $form_state['values']['ms_oid'] = $order->oid;
        $form_state['values']['ms_order_charged'] = TRUE;
        
        // Insert the Payment to the database
        $payment = new stdClass();
        $payment->oid = $order->oid;
        $payment->gateway = 'ms_authorizenet_cim';
        $payment->type = 'cart';
        $payment->transaction = $response['data']['auth_code'];
        $payment->amount = $order->amount;
        $payment->currency = 'USD';
        $payment->data = $payment_profile;
        $payment->recurring_schedule = $order->recurring_schedule;
        
        // Update the address
        $payment->billing_address = array(
          'street' => $payment_profile->billToAddress,
          'city' => $payment_profile->billToCity,
          'state' => $payment_profile->billToState,
          'zip' => $payment_profile->billToZip,
          'country' => $payment_profile->billToCountry,
          'phone' => $payment_profile->billToPhoneNumber,
          );
        $payment->shipping_address = array(
          'street' => $shipping_profile->shipToAddress,
          'city' => $shipping_profile->shipToCity,
          'state' => $shipping_profile->shipToState,
          'zip' => $shipping_profile->shipToZip,
          'country' => $shipping_profile->shipToCountry,
          'phone' => $shipping_profile->shipToPhoneNumber,
          );
        // Update the contact details
        $payment->full_name = $payment_profile->billToFirstName .' '. $payment_profile->billToLastName;
        
        // Add the Payment to the Order
        ms_core_enter_payment($payment, FALSE);
      }
      else {
        form_set_error('payment_id', t('Error: @message', array('@message' => $response['message'])));
      }
    break;
  }
}

/*
 * The card has been charged, mark the order as completed
 */ 
function ms_authorizenet_cim_checkout_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  
  // If the Order was charged, go to thankyou page
  if ($v['ms_order_charged']) {
    drupal_goto('ms/thankyou');
  }
  else {
    // There was an error...
  }
}

/*
 * Build the Checkout Form
 */ 
function ms_authorizenet_checkout_form($form_state, $order) {
  $form = array();
  
  $form['ms_order_contents'] = array(
    '#type' => 'markup',
    '#value' => ms_core_get_order_details_table($order),
  );
  
  ms_core_get_cc_form($form, $order);
  
  ms_core_get_billing_form($form, $order);
  
  $form['ms_oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay Now'),
  );
  
  $form['#validate'][] = 'ms_core_cc_form_validate';
  $form['#validate'][] = 'ms_authorizenet_checkout_form_validate';
  
  return $form;
}

/*
 * Validate the Checkout Form, and Try to Charge the Card
 */ 
function ms_authorizenet_checkout_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  
  if (form_get_errors()) {
    return;
  }
  
  $order = ms_core_order_load($v['ms_oid']);
  
  switch ($order->order_type) {
    case 'recurring':
      // Check if we should use CIM
      if (variable_get('ms_authorizenet_cim_mode', 'disabled') != 'disabled') {
        // Check if there is a free trial
        if ($order->recurring_schedule['trial_length'] AND $order->recurring_schedule['trial_amount'] == 0) {
          // Use AIM to AUTH_ONLY 0.00
          $response = ms_authorizenet_charge($order, 0.00, $v, 'AUTH_ONLY');
          
          if ($response['approved'] == TRUE) {
            // Insert the Payment to the database for the Free Trial
            $payment = new stdClass();
            $payment->oid = $order->oid;
            $payment->gateway = 'ms_authorizenet_cim';
            $payment->type = 'rec_signup';
            $payment->transaction = $response['data']['txn_id'];
            $payment->amount = 0;
            $payment->currency = 'USD';
            $payment->data = $payment_profile;
            $payment->recurring_schedule = $order->recurring_schedule;
            
            // Update the address
            $payment->billing_address = array(
              'street' => trim($v['billing_address1']) .'\n'. trim($v['billing_address2']),
              'city' => trim($v['billing_city']),
              'state' => trim($v['billing_state']),
              'zip' => trim($v['billing_zip']),
              'country' => trim($v['billing_country']),
              'phone' => trim($v['billing_phone']),
              );
            $payment->shipping_address = $payment->billing_address;
            
            // Update the contact details
            $payment->full_name = trim($v['cc_first_name']) .' '. trim($v['cc_last_name']);
            $payment->recurring_id = $order->oid;
            
            // Add the Payment to the Order
            ms_core_enter_payment($payment, FALSE);
            
            // Save the CIM profiles
            if (variable_get('ms_authorizenet_cim_profile', FALSE)) {  
              $order = ms_core_order_load($order->oid);
              ms_authorizenet_create_cim_profiles_from_order($order, $v);
            }
            
            // Add the payment to the order
            $form_state['values']['ms_oid'] = $order->oid;
            $form_state['values']['ms_order_charged'] = TRUE;
          }
          else { // The Credit Card was not approved, set an error on the form
            form_set_error('ccnumber', t('Error') .': '. $response['message']);
          }
        }
        else {
          // Check if there is a trial
          $amount = ($order->recurring_schedule['trial_length']) ? $order->recurring_schedule['trial_amount'] : $order->recurring_schedule['main_amount'];
          
          // Use AIM for the first charge
          $response = ms_authorizenet_charge($order, $amount, $v);
      
          if ($response['approved'] == TRUE) {
            // Insert the Payment to the database for the Free Trial
            $payment = new stdClass();
            $payment->oid = $order->oid;
            $payment->gateway = 'ms_authorizenet_cim';
            $payment->type = 'rec_signup';
            $payment->transaction = $response['data']['txn_id'];
            $payment->amount = 0;
            $payment->currency = 'USD';
            $payment->data = $payment_profile;
            $payment->recurring_schedule = $order->recurring_schedule;
            
            // Update the address
            $payment->billing_address = array(
              'street' => trim($v['billing_address1']) .'\n'. trim($v['billing_address2']),
              'city' => trim($v['billing_city']),
              'state' => trim($v['billing_state']),
              'zip' => trim($v['billing_zip']),
              'country' => trim($v['billing_country']),
              'phone' => trim($v['billing_phone']),
              );
            $payment->shipping_address = $payment->billing_address;
            $payment->recurring_id = $order->oid;
            
            // Update the contact details
            $payment->full_name = trim($v['cc_first_name']) .' '. trim($v['cc_last_name']);
            
            // Add the Payment to the Order
            ms_core_enter_payment($payment, FALSE);
            
            // Save the CIM profiles
            if (variable_get('ms_authorizenet_cim_profile', FALSE)) {  
              $order = ms_core_order_load($order->oid);
              ms_authorizenet_create_cim_profiles_from_order($order, $v);
            }
            
            // Add the rec_payment payment to the order
            $payment->type = 'rec_payment';
            $payment->amount = $amount;
            ms_core_enter_payment($payment, FALSE);
            
            // Add the payment to the order
            $form_state['values']['ms_oid'] = $order->oid;
            $form_state['values']['ms_order_charged'] = TRUE;
          }
          else { // The Credit Card was not approved, set an error on the form
            form_set_error('ccnumber', t('Error') .': '. $response['message']);
          }
        }
      }
      else { // Otherwise Use ARB
        $response = ms_authorizenet_arb_charge($order, $v, $order->recurring_schedule);
        
        if ($response['approved'] == TRUE) {
          // The credit card was approved
          $form_state['values']['ms_oid'] = $order->oid;
          $form_state['values']['ms_order_charged'] = TRUE;
        }
        else { // The Credit Card was not approved, set an error on the form
          form_set_error('ccnumber', t('Error') .': '. $response['message']);
        }
      }
    break;
    
    case 'cart':
      $response = ms_authorizenet_charge($order, $order->amount, $v);
      
      if ($response['approved'] == TRUE) {
        // Insert the Payment to the database
        $payment = new stdClass();
        $payment->oid = $order->oid;
        if (variable_get('ms_authorizenet_cim_profile', FALSE)) { 
          $payment->gateway = 'ms_authorizenet_cim';
        }
        else {
          $payment->gateway = 'ms_authorizenet';
        }
        $payment->type = 'cart';
        $payment->transaction = $response['data']['txn_id'];
        $payment->amount = $order->amount;
        $payment->currency = 'USD';
        $payment->data = $response['data'];
        $payment->recurring_schedule = array();
        
        // Update the address
        $payment->billing_address = array(
          'street' => trim($v['billing_address1']) .'\n'. trim($v['billing_address2']),
          'city' => trim($v['billing_city']),
          'state' => trim($v['billing_state']),
          'zip' => trim($v['billing_zip']),
          'country' => trim($v['billing_country']),
          'phone' => trim($v['billing_phone']),
          );
        $payment->shipping_address = $payment->billing_address;
        // Update the contact details
        $payment->full_name = trim($v['cc_first_name']) .' '. trim($v['cc_last_name']);
        
        // Add the Payment to the Order
        ms_core_enter_payment($payment);
        
        // Save the values
        $form_state['values']['ms_oid'] = $order->oid;
        $form_state['values']['ms_order_charged'] = TRUE;
        
        if (variable_get('ms_authorizenet_cim_profile', FALSE)) {    
          // Save the CIM profiles
          $order = ms_core_order_load($order->oid);
          ms_authorizenet_create_cim_profiles_from_order($order, $v);
        }
      }
      else { // The Credit Card was not approved, set an error on the form
        form_set_error('ccnumber', t('Error') .': '. $response['message']);
      }
    break;
  }
}

/*
 * The card has been charged, mark the order as completed
 */ 
function ms_authorizenet_checkout_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  
  // If the Order was charged, complete it
  if ($v['ms_order_charged']) {
    drupal_goto('ms/thankyou');
  }
  else {
    // There was an error...
  }
}

/**
 * Handles authorizations and captures through AIM at Authorize.Net
 */
function ms_authorizenet_charge($order, $amount, $data, $mode = 'AUTH_CAPTURE') {
  $return = array();
  global $user;
  $isTest = (variable_get('ms_authorizenet_aim_txn_mode', 'developer_test') == 'developer_test') ? TRUE : FALSE;
  
  require_once('includes/authnet.class.php');
  
  // Instantiate our class 
  $aim = new Authnet(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''), $isTest);
  
  // Set our basic transaction information 
  $aim->transaction($data['cc_number'], $data['cc_exp_month'] .'/'. $data['cc_exp_year'], round($amount, 2), $data['cc_cvv']);
  
  $aim->setParameter("x_invoice_num", $order->order_id);
  $aim->setParameter("x_description", substr($description, 0, 255));
  
  $aim->setParameter("x_first_name", substr($data['cc_first_name'], 0, 50));
  $aim->setParameter("x_last_name", substr($data['cc_last_name'], 0, 50));
  $aim->setParameter("x_address", substr($data['billing_address1'], 0, 60));
  $aim->setParameter("x_city", substr($data['billing_city'], 0, 40));
  $aim->setParameter("x_state", substr($data['billing_state'], 0, 40));
  $aim->setParameter("x_zip", substr($data['billing_zip'], 0, 20));
  $aim->setParameter("x_country", $data['billing_country']);
  $aim->setParameter("x_phone", substr($data['billing_phone'], 0, 25));
  $aim->setParameter("x_email", substr($data['billing_email'], 0, 255));
  
  $aim->setParameter("x_cust_id", substr($order->uid, 0, 20));
  $aim->setParameter("x_customer_ip", substr(ip_address(), 0, 15));
  $aim->setParameter("x_email_customer", variable_get('ms_authorizenet_aim_email_customer', FALSE) ? 'TRUE' : 'FALSE');
  
  // Set the transaction type
  $aim->setTransactionType($mode);
  
  // Process the initial payment 
  $aim->process();
  
  if ($aim->isApproved()) {
    $return['approved'] = TRUE;
    $return['data']['txn_id'] = $aim->getTransactionID();
  }
  else {
    // The payment failed
    watchdog('ms_authorizenet', 'Authorize.Net AIM: Payment for Order @oid failed.<br />@text', array('@oid' => $order->oid, '@text' => $aim->getResponseText()));
    // Fail the charge with the reason text in the decline message.
    $return['approved'] = FALSE;
    $return['message'] = t('There was a problem processing the payment: @error', array('@error' => $aim->getResponseText()));
  }
  
  return $return;
}

/**
 * Sends an ARB Create request via the XML API.
 */
function ms_authorizenet_arb_charge($order, $data, $recurring_schedule) {
  $return = array();
  
  $isTest = (variable_get('ms_authorizenet_arb_mode', 'disabled') == 'developer') ? TRUE : FALSE;
  
  require_once('includes/authnet.class.php');
  
  // Instantiate our class 
  $aim = new Authnet(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''), $isTest);

  // Set our basic transaction information 
  $first_charge = ($recurring_schedule['trial_length']) ? $recurring_schedule['trial_amount'] : $recurring_schedule['main_amount'];
  if ($first_charge > 0) {
    $aim->transaction($data['cc_number'], $data['cc_exp_month'] .'/'. $data['cc_exp_year'], round($first_charge, 2), $data['cc_cvv']);
    // Process the initial payment 
    $aim->process();
    $approved = $aim->isApproved();
  }
  else {
    $approved = TRUE;
  }
  
  if ($approved) {
    // Setup recurring billing here 
    
    // Setup variables for the payment schedule.
    $length = $recurring_schedule['main_length'];
    $unit = $recurring_schedule['main_unit'];
    $trial_length = $recurring_schedule['trial_length'];
    $trial_unit = $recurring_schedule['trial_unit'];
    
    // Convert weeks and years to days.
    if ($unit == 'W') {
      $length *= 7;
      $unit = 'D';
    }
    elseif ($unit == 'Y') {
      $length *= 365;
      $unit = 'D';
    }
    
    switch ($unit) {
      case 'D':
        $unit = 'days';
      break;
      case 'M':
        $unit = 'months';
      break;
    }
    
    switch ($trial_unit) {
      case 'D':
        $trial_unit = 'days';
      break;
      case 'M':
        $trial_unit = 'months';
      break;
    }
    
    $trial_occurrences = $recurring_schedule['has_trial'] ? 1 : 0;
    $trial_amount = $recurring_schedule['has_trial'] ? $recurring_schedule['trial_amount'] : 0;
    
    // Make sure we have valid values for Authorize.Net.
    if ($length <= 0 || $unit == 'days' && $length > 365 || $unit == 'months' && $length > 12) {
      watchdog('ms_authorizenet', 'Product has invalid interval settings for Authorize.Net - @length @unit', array('@length' => $length, '@unit' => $unit), WATCHDOG_ERROR);
      $return['approved'] = FALSE;
      $return['message'] = t('Product has invalid interval settings for Authorize.Net');
      return $return;
    }
    
    require_once('includes/AuthnetARB.class.php');
  
    if ($isTest) {
      $arb = new AuthnetARB(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''), AuthnetARB::USE_DEVELOPMENT_SERVER);
    }
    else {
      $arb = new AuthnetARB(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''));
    }
    
    $arb->setParameter('amount', round($recurring_schedule['main_amount'], 2));
    $arb->setParameter('cardNumber', $data['cc_number']);
    $arb->setParameter('expirationDate', $data['cc_exp_year'] .'-'. $data['cc_exp_month']);
    $arb->setParameter('refID', $order->oid);
    $arb->setParameter('firstName', $data['cc_first_name']);
    $arb->setParameter('lastName', $data['cc_last_name']);
    $arb->setParameter('address', substr($data['billing_address1'], 0, 60));
    $arb->setParameter('city', substr($data['billing_city'], 0, 40));
    $arb->setParameter('state', substr($data['billing_state'], 0, 2));
    $arb->setParameter('zip', substr($data['billing_zip'], 0, 20));
    $arb->setParameter('email', $data['billing_email']);
    
    $arb->setParameter('interval_length', $length);
    $arb->setParameter('interval_unit', $unit);
    $arb->setParameter('startDate', date("Y-m-d", strtotime("+ ". $length .' '. $unit)));
    
    $arb->setParameter('trialOccurrences', $trial_occurrences);
    $arb->setParameter('trialAmount', $trial_amount);
    
    // Create the subscription
    $arb->createAccount();
    
    // Check the results of our API call
    if ($arb->isSuccessful()) {
      // Build a message for display and comments in the payments table.
      watchdog('ms_authorizenet', 'Authorize.Net: Recurring fee setup for Order @oid.<br />Subscription ID: @subscription_id', array('@oid' => $order->oid, '@subscription_id' => $result['subscriptionId']));
      
      // The credit card was approved
      $form_state['values']['ms_oid'] = $order->oid;
      $form_state['values']['ms_order_charged'] = TRUE;
      
      // Insert the Payment to the database
      $first_charge = ($order->recurring_schedule['trial_length']) ? $order->recurring_schedule['trial_amount'] : $order->recurring_schedule['main_amount'];
      
      // Insert the Payment to the database
      $payment = new stdClass();
      $payment->oid = $order->oid;
      $payment->type = 'rec_signup';
      $payment->gateway = 'ms_authorizenet';
      $payment->transaction = $arb->getSubscriberID();
      $payment->amount = 0;
      $payment->currency = 'USD';
      $payment->data = array('subscriptionId' => $arb->getSubscriberID());
      $payment->recurring_schedule = $order->recurring_schedule;
      $payment->recurring_id = $arb->getSubscriberID();
      
      // Update the address
      $payment->billing_address = array(
        'street' => trim($data['billing_address1']) .'\n'. trim($data['billing_address2']),
        'city' => trim($data['billing_city']),
        'state' => trim($data['billing_state']),
        'zip' => trim($data['billing_zip']),
        'country' => trim($data['billing_country']),
        'phone' => trim($data['billing_phone']),
        );
      $payment->shipping_address = $payment->billing_address;
      // Update the contact details
      $payment->full_name = trim($data['cc_first_name']) .' '. trim($data['cc_last_name']);
      
      // Add the Payment to the Order
      ms_core_enter_payment($payment, FALSE);
      
      // Add the rec_payment for the order
      if ($first_charge > 0) {
        $payment->type = 'rec_payment';
        $payment->amount = $first_charge;
        ms_core_enter_payment($payment, FALSE);
      }
      
      $return['approved'] = TRUE;
    }
    else {
      // The subscription was not created!
      watchdog('ms_authorizenet', 'Authorize.Net: Recurring fee for Order @oid failed.<br />@error - @text', array('@oid' => $order->oid, '@error' => $result['code'], '@text' => $result['text']));
      // Fail the charge with the reason text in the decline message.
      $return['approved'] = FALSE;
      $return['message'] = t('There was a problem processing the payment: @error', array('@error' => $arb->getResponse()));
    }
  }
  else {
    // The payment failed
    watchdog('ms_authorizenet', 'Authorize.Net: Payment for Order @oid failed.<br />@error - @text', array('@oid' => $order->oid, '@error' => $result['code'], '@text' => $result['text']));
    // Fail the charge with the reason text in the decline message.
    $return['approved'] = FALSE;
    $return['message'] = t('There was a problem processing the payment: @error', array('@error' => $aim->getResponseText()));
  }
  
  return $return;
}

/**
 * Creates a new CIM charging schedule
 */
function ms_authorizenet_cim_charge($order, $amount, $profile, $payment_profile, $shipping_profile) {
  $return = array();
  
  // Include AuthnetCIM class
  require_once('includes/AuthnetCIM.class.php');
  
  // Create AuthnetCIM object
  $isTest = (variable_get('ms_authorizenet_cim_mode', 'disabled') == 'developer') ? TRUE : FALSE;
  $cim = new AuthnetCIM(variable_get('ms_authorizenet_api_login_id', ''), variable_get('ms_authorizenet_api_transaction_key', ''), $isTest);
  
  // Prepare the variables
  $cim->setParameter('customerProfileId', $profile->profile_id);
  $cim->setParameter('customerPaymentProfileId', $payment_profile->payment_id);
  $cim->setParameter('customerShippingAddressId', $shipping_profile->shipping_id);
  $cim->setLineItem($order->oid, ms_core_get_order_title($order, 16), ms_core_get_order_title($order), '1', $amount);
  $cim->setParameter('amount', $amount);
  
  $cim->createCustomerProfileTransaction();
  
  if ($cim->isSuccessful()) { // Get the payment profile ID returned from the request
    watchdog('ms_authorizenet', 'Successfully charged a CIM Payment Profile: !message Profile: !profile', 
      array('!message' => $cim->getResponseSummary(), '!profile' => '<pre>'. print_r($payment_profile, TRUE) .'</pre>'));
    
    $return['data']['auth_code'] = $cim->getAuthCode();
    $return['approved'] = TRUE;
  }
  else {
    watchdog('ms_authorizenet', 'There was an error charging a CIM Payment Profile: !error Profile: !profile', 
      array('!error' => $cim->getResponseSummary(), '!profile' => '<pre>'. print_r($payment_profile, TRUE) .'</pre>'), WATCHDOG_ERROR);
    $return['approved'] = FALSE;
    $return['message'] = t('There was a problem processing the payment: @error', array('@error' => $cim->getResponseSummary()));
  }
  
  return $return;
}

function ms_authorizenet_silent_post() {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;
  watchdog('ms_authorizenet', 'Received Silent POST: !vars', array('!vars' => '<pre>'. print_r($_POST, TRUE) .'</pre>'));
  // Insert a payment for recurring payments
  $order = ms_core_order_load_by_rec_id($_POST['x_subscription_id']);
  
  if ($order) {
    // Get the response code. 1 is success, 2 is decline, 3 is error
    $response_code = (int) $_POST['x_response_code'];
    
    // Get the reason code. 8 is expired card.
    $reason_code = (int) $_POST['x_response_reason_code'];
    
    if ($response_code == 1) {
      // Approved!
      
      // Some useful fields might include:
      // $authorization_code = $_POST['x_auth_code'];
      // $avs_verify_result  = $_POST['x_avs_code'];
      // $transaction_id     = $_POST['x_trans_id'];
      // $customer_id        = $_POST['x_cust_id'];
      
      // Log this
      if (variable_get('ms_core_debug_mode', FALSE)) {
        watchdog('ms_authorizenet', 'Processing ARB Recurring Payment Charge for Order #!num. Here are the vars: !message', 
          array('!num' => $order->oid, '!message' => '<pre>'. print_r($_POST, TRUE) .'</pre>'));
      }
      // Insert the rec_payment Payment to the database
      $payment = new stdClass();
      $payment->oid = $order->oid;
      $payment->gateway = 'ms_authorizenet';
      $payment->type = 'rec_payment';
      $payment->transaction = $_POST['x_trans_id'];
      $payment->amount = $_POST['x_amount'];
      $payment->currency = 'USD';
      $payment->data = $_POST;
      $payment->recurring_schedule = $order->recurring_schedule;
      
      // Update the address
      $payment->billing_address = array(
        'street' => $_POST['x_address'],
        'city' => $_POST['x_city'],
        'state' => $_POST['x_state'],
        'zip' => $_POST['x_zip'],
        'country' => $_POST['x_country'],
        'phone' => $_POST['x_phone'],
      );
      $payment->shipping_address = array(
        'street' => $_POST['x_ship_to_address'],
        'city' => $_POST['x_ship_to_city'],
        'state' => $_POST['x_ship_to_state'],
        'zip' => $_POST['x_ship_to_zip'],
        'country' => $_POST['x_ship_to_country'],
        'phone' => $_POST['x_phone'],
      );
      
      // Update the contact details
      $payment->full_name = $_POST['x_first_name'] .' '. $_POST['x_last_name'];
      
      // Add the Payment to the Order
      ms_core_enter_payment($payment, FALSE);
      
      $recurring_schedule = ms_core_load_recurring_schedule($order->oid);
      
      // Check if the recurring_schedule is done, send rec_eot
      if ($recurring_schedule->total_occurrences != 0 AND $recurring_schedule->total_occurrences <= ($recurring_schedule->current_payments + 1)) {
        $payment->type = 'rec_eot';
        $payment->amount = 0;
        ms_core_enter_payment($payment, FALSE);
      }
    }
    else if ($response_code == 2) {
      // Declined
      // Log this
      watchdog('ms_authorizenet', 'ARB Recurring Payment for Order #!num was Declined. Here are the details: @message', 
        array('!num' => $order->oid, '@message' => '<pre>'. print_r($_POST, TRUE) .'</pre>'), WATCHDOG_WARNING);
    }
    else if ($response_code == 3 && $reason_code == 8) {
      // An expired card
      // Log this
      watchdog('ms_authorizenet', 'ARB Recurring Payment for Order #!num failed because the card has expired. Here are the details: @message', 
        array('!num' => $order->oid, '@message' => '<pre>'. print_r($_POST, TRUE) .'</pre>'), WATCHDOG_WARNING);
    }
    else {
      // Other error
      // Log this
      watchdog('ms_authorizenet', 'ARB Recurring Payment for Order #!num has failed. Here are the details: @message', 
        array('!num' => $order->oid, '@message' => '<pre>'. print_r($_POST, TRUE) .'</pre>'), WATCHDOG_WARNING);
    }
  }
  else {
    // No Order Loaded
    // Log this
    watchdog('ms_authorizenet', 'Error loading order for Silent Post. Here are the details: @message', 
      array('@message' => '<pre>'. print_r($_POST, TRUE) .'</pre>'), WATCHDOG_WARNING);
  }
}

// ======================================
// MAIL
// ======================================

/**
 * Handle Mail functions
 */
function ms_authorizenet_mail($key, &$message, $seed_vars) {
  switch ($key) {
    case 'expirationReminder':
      $payment_profile = $vars['payment_profile'];
      $account = user_load($payment_profile->uid);
      
      $message['subject'] = variable_get('ms_authorizenet_expiration_reminder_subject', '');
      $message['body'] = variable_get('ms_authorizenet_expiration_reminder_body', '');
      
      // Replace the Tokens
      $message['subject'] = token_replace($message['subject'], 'ms_authorizenet_payment_profile', $payment_profile);
      $message['body'] = token_replace($message['body'], 'ms_authorizenet_payment_profile', $payment_profile);
      
      // Replace the User Tokens
      $message['subject'] = token_replace($message['subject'], 'user', $account);
      $message['body'] = token_replace($message['body'], 'user', $account);
    break;
    
    case 'card_update_confirm':
      $payment_profile = $vars['payment_profile'];
      $account = user_load($payment_profile->uid);
      
      $message['subject'] = variable_get('ms_authorizenet_card_update_confirm_subject', '');
      $message['body'] = variable_get('ms_authorizenet_card_update_confirm_body', '');
      
      // Replace the Tokens
      $message['subject'] = token_replace($message['subject'], 'ms_authorizenet_payment_profile', $payment_profile);
      $message['body'] = token_replace($message['body'], 'ms_authorizenet_payment_profile', $payment_profile);
      
      // Replace the User Tokens
      $message['subject'] = token_replace($message['subject'], 'user', $account);
      $message['body'] = token_replace($message['body'], 'user', $account);
    break;
    
    case 'billing_error':
      $payment_profile = $vars['payment_profile'];
      $account = user_load($payment_profile->uid);
      
      $message['subject'] = variable_get('ms_authorizenet_billing_error_subject', '');
      $message['body'] = variable_get('ms_authorizenet_billing_error_body', '');
      
      // Replace the Tokens
      $message['subject'] = token_replace($message['subject'], 'ms_authorizenet_payment_profile', $payment_profile);
      $message['body'] = token_replace($message['body'], 'ms_authorizenet_payment_profile', $payment_profile);
      
      // Replace the User Tokens
      $message['subject'] = token_replace($message['subject'], 'user', $account);
      $message['body'] = token_replace($message['body'], 'user', $account);
    break;
  }
}

// ======================================
// TOKEN
// ======================================

/**
 * Implementation of hook_token_list
 */
function ms_authorizenet_token_list($type = 'all') {
  if ($type == 'ms_authorizenet_payment_profile' || $type == 'all') {
    $tokens['Payment Profile']['updateUrl'] = t("The URL for the update payment profile page.");
    $tokens['Payment Profile']['expirationMonth'] = t("Expiration Month of the Card");
    $tokens['Payment Profile']['expirationYear'] = t("Expiration Year of the Card");
    $tokens['Payment Profile']['cardNumber'] = t("Last 4 Digits of Card Number with XXXXs for the rest");
    $tokens['Payment Profile']['billToFirstName'] = t("Billing First Name");
    $tokens['Payment Profile']['billToLastName'] = t("Billing Last Name");
    $tokens['Payment Profile']['billToAddress'] = t("Billing Address");
    $tokens['Payment Profile']['billToCity'] = t("Billing City");
    $tokens['Payment Profile']['billToState'] = t("Billing State");
    $tokens['Payment Profile']['billToZip'] = t("Billing Zip");
    $tokens['Payment Profile']['billToCountry'] = t("Billing Country");
    $tokens['Payment Profile']['billToPhoneNumber'] = t("Billing Phone");
    $tokens['Payment Profile']['billToFaxNumber'] = t("Billing Fax");
  }
  return $tokens;
}

/**
 * Implementation of hook_token_values
 */
function ms_authorizenet_token_values($type, $object = NULL, $options = array()) {
  if ($type == 'ms_authorizenet_payment_profile') {
    $tokens['updateUrl'] = url('user/'. $object->uid .'/edit/ms_core_billing_info', array('absolute' => TRUE));
    $tokens['expirationMonth'] = str_pad($object->expirationMonth, 2, 0, STR_PAD_LEFT);
    $tokens['expirationYear'] = $object->expirationYear;
    $tokens['cardNumber'] = $object->cardNumber;
    $tokens['billToFirstName'] = $object->billToFirstName;
    $tokens['billToLastName'] = $object->billToLastName;
    $tokens['billToAddress'] = $object->billToAddress;
    $tokens['billToCity'] = $object->billToCity;
    $tokens['billToState'] = $object->billToState;
    $tokens['billToZip'] = $object->billToZip;
    $tokens['billToCountry'] = $object->billToCountry;
    $tokens['billToPhoneNumber'] = $object->billToPhoneNumber;
    $tokens['billToFaxNumber'] = $object->billToFaxNumber;
  }
  
  return $tokens;
}