<?php
// $Id$
/**
* @file
* MoneyScripts Coupons
* Copyright 2010 MoneyScripts.net
* http://www.moneyscripts.net
*/

/**
 * Implementation of hook_menu().
 */
function ms_coupons_menu() {
  $items = array();

  $items['admin/moneyscripts/ms_coupons'] = array(
    'title' => 'Coupons',
    'description' => 'Manage discount coupons.',
    'page callback' => 'ms_coupons_display',
    'page arguments' => array('active'),
    'access arguments' => array('view coupons'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneyscripts/ms_coupons/list'] = array(
    'title' => 'Active coupons',
    'description' => 'View active coupons.',
    'page callback' => 'ms_coupons_display',
    'page arguments' => array('active'),
    'access arguments' => array('view coupons'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/moneyscripts/ms_coupons/inactive'] = array(
    'title' => 'Inactive coupons',
    'description' => 'View inactive coupons.',
    'page callback' => 'ms_coupons_display',
    'page arguments' => array('inactive'),
    'access arguments' => array('view coupons'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/moneyscripts/ms_coupons/add'] = array(
    'title' => 'Add new coupon',
    'description' => 'Add a new coupon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_coupons_add_form', 'add'),
    'access arguments' => array('manage coupons'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['admin/moneyscripts/ms_coupons/edit/%'] = array(
    'title' => 'Edit coupon',
    'description' => 'Edit an existing coupon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_coupons_add_form', 'edit', 4),
    'access arguments' => array('manage coupons'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneyscripts/ms_coupons/delete/%'] = array(
    'title' => 'Delete coupon',
    'description' => 'Delete a coupon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_coupons_delete_confirm', 4),
    'access arguments' => array('manage coupons'),
    'type' => MENU_CALLBACK,
  );
  $items['ms/checkout/coupon'] = array(
    'title' => 'Apply coupon',
    'page callback' => 'ms_coupons_checkout_apply',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['ms_coupons/autocomplete/user'] = array(
    'title' => 'User autocomplete',
    'page callback' => 'ms_coupons_autocomplete_user',
    'access arguments' => array('manage coupons'),
    'type' => MENU_CALLBACK,
  );
  $items['ms_coupons/autocomplete/role'] = array(
    'title' => 'Role autocomplete',
    'page callback' => 'ms_coupons_autocomplete_role',
    'access arguments' => array('manage coupons'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function ms_coupons_perm() {
  return array('view coupons', 'manage coupons');
}


/**
 * Display a brief over view of system coupons
 *
 * @param $view_type
 *   pass in an argument to filter out active/inactive coupons
 */
function ms_coupons_display($view_type = 'active') {
  $header[] = array('data' => t('Name'), 'field' => 'name');
  $header[] = array('data' => t('Code'), 'field' => 'code', 'sort' => 'asc');
  $header[] = array('data' => t('Value'), 'field' => 'value');
  $header[] = array('data' => t('Valid until'), 'field' => 'valid_until');
  $header[] = array('data' => t('Actions'));

  $result = pager_query('SELECT cid, name, value, code, type, valid_until FROM {ms_coupons} WHERE status = %d'. tablesort_sql($header), 20, 0, NULL, $view_type == 'inactive' ? 0 : 1);
  $rows = array();
  while ($row = db_fetch_object($result)) {
    if ($row->type == 'percentage') {
      $value = $row->value .'%';
    }
    else {
      $value = ms_core_format_money($row->value);
    }

    $code = $row->code;
    $actions = l(t('edit'), "admin/moneyscripts/ms_coupons/edit/". $row->cid);
    
    $actions .= ' '. l(t('delete'), "admin/moneyscripts/ms_coupons/delete/". $row->cid);

    $rows[] = array($row->name, $code, $value, format_date($row->valid_until, 'custom', 'm/d/Y'), $actions);
  }

  if (count($rows)) {
    $output = theme('table', $header, $rows, array('width' => '100%'));
    $output .= theme('pager', NULL, 20);
  }
  else {
    $output = '<p>'. t('There are currently no !type coupons in the system.', array('!type' => $view_type)) .'</p>';
  }

  return $output;
}

/**
 *  Form builder for product attributes.
 *
 * @param $action string
 * Form action, edit or add. 'edit' loads default values.
 *
 * @param $coupon object
 * Coupon, used to load defaults when $action = 'edit'
 */
function ms_coupons_add_form($form_state, $action, $cid = NULL) {
  if ($action == 'edit') {
    $coupon = ms_coupons_load($cid);
    $value = $coupon;
    $form['#ms_coupons_cid'] = $value->cid;
    $form['#ms_coupons'] = $value;
  }
  else {
    $value->valid_until = time();
    $value->minimum_order = 0;
    $value->max_uses = 0;
    $used = 0;
  }

  $value->valid_until = array('year' => format_date($value->valid_until, 'custom', 'Y'), 'month' => format_date($value->valid_until, 'custom', 'n'), 'day' => format_date($value->valid_until, 'custom', 'j'));

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Coupon name'),
    '#default_value' => $value->name,
    '#required' => TRUE,
  );

  $form['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Coupon code'),
    '#description' => t('Coupon codes cannot be changed once they have been used in an order.'),
    '#default_value' => $value->code,
    '#size' => 25,
    '#required' => !$used,
    '#maxlength' => 14,
    '#disabled' => $used,
  );

  $form['valid_until'] = array(
    '#type' => 'date',
    '#title' => t('Expiry date'),
    '#default_value' => $value->valid_until,
    '#required' => TRUE,
    '#after_build' => array('_ms_coupons_date_range'),
  );

  $form['status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#description' => t('Check to enable the coupon, uncheck to disable the coupon.'),
    '#default_value' => $value->status,
  );

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Discount type'),
    '#default_value' => $value->type,
    '#options' => array(
      'percentage' => 'Percentage',
      'fixed' => 'Fixed Value'
    ),
  );

  $form['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Discount value'),
    '#default_value' => $value->value,
    '#size' => 10,
    '#description' => t('Enter values without symbols, for 15%, enter "15" and choose Percentage as the discount type.'),
    '#required' => TRUE,
  );

  $form['minimum_order'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum order limit'),
    '#default_value' => $value->minimum_order,
    '#size' => 10,
    '#description' => t('A minimum order total that applies to the coupon, or 0 for no minimum order limit.'),
    '#required' => TRUE,
  );

  $form['max_uses'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of redemptions (per code)'),
    '#default_value' => $value->max_uses,
    '#description' => t('Enter the maximum number of times each code for this coupon can be used, or 0 for unlimited.'),
    '#size' => 5,
    '#required' => TRUE,
  );

  $form['max_uses_per_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of redemptions (per user)'),
    '#default_value' => isset($value->data['max_uses_per_user']) ? $value->data['max_uses_per_user'] : 0,
    '#description' => t('Enter the maximum number of times this coupon can be used by a single user, or 0 for unlimited.'),
    '#size' => 5,
    '#required' => TRUE,
  );

  $form['users'] = array(
    '#type' => 'fieldset',
    '#title' => t('User restrictions'),
    '#description' => t('Enter one or more user names and/or "anonymous users" below to make this coupon valid only for those users.'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => !isset($value->data['users']),
  );

  if (isset($value->data['users'])) {
    foreach ($value->data['users'] as $uid) {
      $username = $uid ? db_result(db_query('SELECT name FROM {users} WHERE uid = %d', $uid)) : t('anonymous users');
      $form['users'][] = array(
        '#type' => 'textfield',
        '#default_value' => $username .' [uid:'. $uid .']',
        '#autocomplete_path' => 'ms_coupons/autocomplete/user',
      );
    }
  }

  for ($i = 0; $i < 3; $i++) {
    $form['users'][] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'ms_coupons/autocomplete/user',
    );
  }

  $form['roles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Role restrictions'),
    '#description' => t('Enter one or more role names below to make this coupon valid only for users with those roles.'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => !isset($value->data['roles']),
  );

  if (isset($value->data['roles'])) {
    foreach ($value->data['roles'] as $role) {
      $form['roles'][] = array(
        '#type' => 'textfield',
        '#default_value' => $role,
        '#autocomplete_path' => 'ms_coupons/autocomplete/role',
      );
    }
  }

  for ($i = 0; $i < 3; $i++) {
    $form['roles'][] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'ms_coupons/autocomplete/role',
    );
  }
  
  $form['products'] = array(
    '#type' => 'fieldset',
    '#title' => t('Product restrictions'),
    '#description' => t('Enter one or more product ids below to make this coupon valid only for those products. Product id takes the following form: [module_name]-[product_id] Example: ms_membership-1'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => !isset($value->data['products']),
  );
  if (isset($value->data['products'])) {
    foreach ($value->data['products'] as $id) {
      $form['products'][] = array(
        '#type' => 'textfield',
        '#default_value' => $id,
        '#autocomplete_path' => 'ms_core/autocomplete/product',
      );
    }
  }
  for ($i = 0; $i < 3; $i++) {
    $form['products'][] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'ms_core/autocomplete/product',
    );
  }

  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));

  return $form;
}

function _ms_coupons_date_range($form_element) {
  $form_element['year']['#options'] = drupal_map_assoc(range(2008, 2020));
  return $form_element;
}

function ms_coupons_get_coupons_list() {
  $coupons = array();
  $result = db_query("SELECT * FROM {ms_coupons} WHERE status = %d", 1);
  
  while ($row = db_fetch_object($result)) {
    $coupons[$row->cid] = $row->name;
  }
  
  return $coupons;
}

function ms_coupons_autocomplete_user($string) {
  $matches = array();
  $anonymous = t('anonymous users');
  if (strpos($anonymous, $string) !== FALSE) {
    $matches[$anonymous .' [uid:0]'] = $anonymous;
  }

  $result = db_query_range("SELECT uid, name FROM {users} WHERE name LIKE '%%%s%'", $string, 0, 10);
  while ($row = db_fetch_object($result)) {
    $matches[$row->name .' [uid:'. $row->uid .']'] = $row->name;
  }
  print drupal_to_js($matches);
  exit;
}

function ms_coupons_autocomplete_role($string) {
  $matches = array();
  $result = db_query_range("SELECT name FROM {role} WHERE name LIKE '%%%s%'", $string, 0, 10);
  while ($row = db_fetch_object($result)) {
    $matches[$row->name] = $row->name;
  }
  print drupal_to_js($matches);
  exit;
}

/**
 * Coupon form validate handler.
 */
function ms_coupons_add_form_validate($form, &$form_state) {
  // check to ensure a unique coupon code
  if ($coupon = ms_coupons_find($form_state['values']['code'])) {
    if ($coupon->cid != $form['#ms_coupons_cid']) {
      form_set_error('code', t('Coupon code already used by %name.', array('%name' => $coupon->name)));
    }
  }

  foreach ($form_state['values']['users'] as $key => $user) {
    if ($user && !preg_match('/\[uid:(\d+)\]$/', $user)) {
      form_set_error('users]['. $key, t('User names must include the user ID.'));
    }
  }
}

/**
 * Coupon form submit handler.
 */
function ms_coupons_add_form_submit($form, &$form_state) {
  $code = strtoupper($form_state['values']['code']);
  $valid_until = mktime(0, 0, 0, $form_state['values']['valid_until']['month'], $form_state['values']['valid_until']['day'], $form_state['values']['valid_until']['year']);
  $data = array();

  if ($form_state['values']['max_uses_per_user']) {
    $data['max_uses_per_user'] = $form_state['values']['max_uses_per_user'];
  }

  foreach ($form_state['values']['users'] as $key => $user) {
    if ($user && preg_match('/\[uid:(\d+)\]$/', $user, $matches)) {
      $data['users'][] = $matches[1];
    }
  }

  foreach ($form_state['values']['roles'] as $role) {
    if ($role) {
      $data['roles'][] = $role;
    }
  }
  
  foreach ($form_state['values']['products'] as $id) {
    if ($id) {
      $data['products'][] = $id;
    }
  }

  if (!isset($form['#ms_coupons_cid'])) {
    // Only set bulk coupon seed once.
    db_query("INSERT INTO {ms_coupons} (name, code, value, type, status, valid_until, max_uses, minimum_order, data) VALUES ('%s', '%s', %f, '%s', %d, %d, %d, %d, '%s')", $form_state['values']['name'], $code, $form_state['values']['value'], $form_state['values']['type'], $form_state['values']['status'], $valid_until, $form_state['values']['max_uses'], $form_state['values']['minimum_order'], serialize($data));
    drupal_set_message(t('Coupon %name has been created.', array('%name' => $form_state['values']['name'])));
  }
  else {
    db_query("UPDATE {ms_coupons} SET name = '%s', code = '%s', value = %f, type = '%s', status = %d, valid_until = %d, max_uses = %d, minimum_order = %d, data = '%s' WHERE cid = %d", $form_state['values']['name'], $code, $form_state['values']['value'], $form_state['values']['type'], $form_state['values']['status'], $valid_until, $form_state['values']['max_uses'], $form_state['values']['minimum_order'], serialize($data), $form['#ms_coupons_cid']);
    drupal_set_message(t('Coupon %name has been updated.', array('%name' => $form_state['values']['name'])));
  }

  $form_state['redirect'] = 'admin/moneyscripts/ms_coupons'. ($form_state['values']['status'] ? '' : '/inactive');
}


/**
 * Load a coupon into the form for editing
 *
 * @param $cid
 *  Unique coupon ID.
 *
 * @return $coupon
 *  Returns a coupon object.
 */
function ms_coupons_load($cid) {
  $coupon = db_fetch_object(db_query("SELECT * FROM {ms_coupons} WHERE cid = %d", $cid));
  if ($coupon->data) {
    $coupon->data = unserialize($coupon->data);
  }
  return $coupon;
}

/**
 * Delete coupon confirm form
 *
 * @param $cid int
 * Coupon ID.
 *
 * @return $confirm
 *  Return a drupal confirm form.
 */
function ms_coupons_delete_confirm(&$form_state, $cid) {
  $coupon = ms_coupons_load($cid);
  $form['#ms_coupons_cid'] = $coupon->cid;
  return confirm_form($form, t('Are you sure you want to delete coupon %name with code %code?', array('%name' => $coupon->name, '%code' => $coupon->code)), 'admin/moneyscripts/ms_coupons', t('This action cannot be undone. Deleting this coupon will remove all records of past uses as well.'), t('Delete'));
}

function ms_coupons_delete_confirm_submit($form, &$form_state) {
  $coupon = ms_coupons_load($form['#ms_coupons_cid']);

  db_query("DELETE FROM {ms_coupons} WHERE cid = %d", $form['#ms_coupons_cid']);

  drupal_set_message(t('Coupon %name has been deleted.', array('%name' => $coupon->name)));
  $form_state['redirect'] = 'admin/moneyscripts/ms_coupons'. ($coupon->status ? '' : '/inactive');
}

/**
 * Load a coupon from the supplied code.
 */
function ms_coupons_find($code) {
  $code = strtoupper($code);
  // Look for matching single coupon first.
  $coupon = db_fetch_object(db_query("SELECT * FROM {ms_coupons} WHERE code = '%s' AND status = 1 AND valid_until > %d", $code, time()));
  if ($coupon !== FALSE) {
    if ($coupon->data) {
      $coupon->data = unserialize($coupon->data);
    }
    return $coupon;
  }
  
  // Next give other modules a chance
  $module_coupons = module_invoke_all('ms_coupons', $code);
  
  if ($coupon = $module_coupons[$code]) {
    if (!is_array($coupon->data)) {
      $coupon->data = unserialize($coupon->data);
    }
    return $coupon;
  }
  
  return FALSE;
}

/**
 * Validate a coupon and calculate the coupon amount against the current cart contents.
 *
 * @param $code
 *  The coupon code entered at the checkout screen
 *
 * @return
 *  Returns a coupon result object with details about the validation
 */
function ms_coupons_validate($code) {
  global $user;

  $result->valid = FALSE;

  $code = strtoupper($code);
  $coupon = ms_coupons_find($code);

  if (!$coupon) {
    $result->message = t('This coupon code is invalid or has expired.');
    return $result;
  }
  
  $cart = ms_core_get_cart();
  $applicable_total = ms_core_get_order_products_total($cart);
  $applicable_qty = 1;

  if ($applicable_total == 0) {
    $result->message = t('You cannot use a coupon when the total for the products is 0.');
    return $result;
  }
  
  // TESTME
  // CHECK MAX USES
  if ($coupon->max_uses > 0) {
    $used = db_result(db_query("SELECT COUNT(*) FROM {ms_order_adjustments} AS msoa LEFT JOIN {ms_orders} AS mso ON msoa.oid = mso.oid WHERE msoa.id = '%s' AND mso.uid != %d", 'ms_coupons_'. $coupon->cid, 0));
    if ($used >= $coupon->max_uses) {
      $result->message = t('This coupon has reached the maximum redemption limit.');
      return $result;
    }
  }
  
  // CHECK MAX USES PER USER
  if ($user->uid AND isset($coupon->data['max_uses_per_user'])) {
    $used = db_result(db_query("SELECT COUNT(*) FROM {ms_order_adjustments} AS msoa LEFT JOIN {ms_orders} AS mso ON msoa.oid = mso.oid WHERE msoa.id = '%s' AND mso.uid = %d", 'ms_coupons_'. $coupon->cid, $user->uid));
    if ($used >= $coupon->data['max_uses_per_user']) {
      $result->message = t('This coupon has reached the maximum redemption limit.');
      return $result;
    }
  }

  // CHECK MINIMUM PURCHASE VALUE
  if ($coupon->minimum_order > 0 && $coupon->minimum_order > $applicable_total) {
    $result->message = t('You have not reached the minimum order total for this coupon.');
    return $result;
  }

  // CHECK USER ID
  if (isset($coupon->data['users'])) {
    if (!in_array("$user->uid", $coupon->data['users'], TRUE)) {
      $result->message = t('Your user ID is not allowed to use this coupon.');
      return $result;
    }
  }

  // CHECK ROLES
  if (isset($coupon->data['roles'])) {
    $role_found = FALSE;
    foreach ($coupon->data['roles'] as $role) {
      if (in_array($role, $user->roles)) {
        $role_found = TRUE;
        break;
      }
    }
    if (!$role_found) {
      $result->message = t('You do not have the correct permission to use this coupon.');
      return $result;
    }
  }
  
  // CHECK PRODUCTS
  if (isset($coupon->data['products'])) {
    $product_found = FALSE;
    foreach ($coupon->data['products'] as $id) {
      foreach ($cart->products as $key => $product) {
        if ($id == $product->module .'-'. $product->id) {
          $product_found = TRUE;
          break;
        }
      }
    }
    if (!$product_found) {
      $result->message = t('You must use this coupon with a valid product.');
      return $result;
    }
  }

  // CHECK USER PERMISSIONS
  // 1 - both wholesale and retail any user
  // 2 - wholesale only -> users with 'coupon wholesale pricing'
  // 3 - retail only -> users without 'coupon wholesale pricing'
  if ($coupon->data['wholesale'] > 1) {
    if ($coupon->data['wholesale'] == 2) {
      if (!user_access('coupon wholesale pricing')) {
        $result->message = t('You do not have the correct permission to use this coupon.');
        return $result;
      }
    }
    elseif ($coupon->data['wholesale'] == 3) {
      if (user_access('coupon wholesale pricing')) {
        $result->message = t('You do not have the correct permission to use this coupon.');
        return $result;
      }
    }
  }

  $result->valid = TRUE;
  $result->code = $code;
  $result->cid = $coupon->cid;
  $result->title = t('Coupon: @code', array('@code' => $code));

  if ($coupon->type == 'percentage') {
    $result->amount = $applicable_total * $coupon->value / 100;
  }
  elseif ($coupon->type == 'fixed') {
    $result->amount = min($applicable_total, $applicable_qty * $coupon->value);
  }

  return $result;
}

function ms_coupons_enter_coupon_form(&$form) {
  $form['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Coupon code'),
    '#default_value' => $code,
    '#size' => 25,
  );
  $form['apply_coupon'] = array(
    '#type' => 'submit',
    '#value' => t('Apply to order'),
    '#validate' => array('ms_coupons_enter_coupon_form_validate'),
    '#submit' => array('ms_coupons_enter_coupon_form_submit'),
  );
}

function ms_coupons_enter_coupon_form_validate($form, $form_state) {
  $code = $form_state['values']['code'];
  
  drupal_get_messages('error');  //clears out messages thrown by built in validation
  
  $result = ms_coupons_validate($code);
  if (!$result->valid) {
    form_set_error('code', $result->message);
  }
  else {
    $coupon = ms_coupons_find($code);
    
    $adjustment = new stdClass();
    $adjustment->id = 'ms_coupons_'. $coupon->cid;
    $adjustment->display = t('Coupon Code: !code', array('!code' => $coupon->code));
    $adjustment->type = $coupon->type;
    $adjustment->value = -$coupon->value;
    $adjustment->weight = 0;
    
    // Next give other modules a chance to act on this
    // FIXME - In future, let the hook change the $adjustment before it is saved
    module_invoke_all('ms_coupon_added', $coupon);
    
    // Add the coupon to the order
    ms_core_add_cart_adjustment($adjustment, TRUE);
    
    drupal_set_message(t('Discount Coupon !code has been applied to your order, for a discount of !discount.', 
      array('!discount' => ms_coupons_get_discount_string($coupon), '!code' => $coupon->code)));
      
    // Redirec to ms/checkout
    drupal_goto('ms/checkout');
  }
}

function ms_coupons_enter_coupon_form_submit($form, $form_state) {
  
}

function ms_coupons_enter_coupon_cart_form($form_state) {
  $form = array();
  $form['ms_coupons'] = array(
    '#type' => 'fieldset',
    '#title' => t('Discount Coupon'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    );
  $form['ms_coupons']['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Coupon code'),
    '#default_value' => $code,
    '#size' => 25,
  );
  $form['ms_coupons']['apply_coupon'] = array(
    '#type' => 'submit',
    '#value' => t('Apply to order'),
    '#validate' => array('ms_coupons_enter_coupon_form_validate'),
    '#submit' => array('ms_coupons_enter_coupon_form_submit'),
  );
  
  return $form;
}

function ms_coupons_enter_coupon_cart_form_validate($form, $form_state) {
  $code = $form_state['values']['code'];
  
  $result = ms_coupons_validate($code);
  if (!$result->valid) {
    form_set_error('code', $result->message);
  }
}

function ms_coupons_enter_coupon_cart_form_submit($form, $form_state) {
  $code = $form_state['values']['code'];
  $coupon = ms_coupons_find($code);
  
  $adjustment = new stdClass();
  $adjustment->id = 'ms_coupons_'. $coupon->cid;
  $adjustment->display = t('Coupon Code: !code', array('!code' => $coupon->code));
  $adjustment->type = $coupon->type;
  $adjustment->value = -$coupon->value;
  $adjustment->weight = 0;
  
  // Add the coupon to the order
  ms_core_add_cart_adjustment($adjustment, TRUE);
  
  drupal_set_message(t('Discount Coupon !code has been applied to your order, for a discount of !discount.', 
    array('!discount' => ms_coupons_get_discount_string($coupon), '!code' => $coupon->code)));
}

/*
 * Return a Discount String
 */
function ms_coupons_get_discount_string($coupon, $currency = NULL) {
  switch ($coupon->type) {
    case 'percentage':
      return rtrim(trim($coupon->value, '0'), '.') .'%';
    break;
    
    case 'fixed':
      return ms_core_format_money($coupon->value, $currency);
    break;
  }
  return '';
}

/*
 * Implementation of hook_ms_checkout_fields()
 */
function ms_coupons_ms_checkout_fields($order) {
  $fields = array();
  // Show the Coupon Entry Form
  $fields[] = array(
    'id' => 'ms_coupons_enter_coupon',
    'title' => 'Discount Coupon',
    'type' => 'form',
    'html' => 'ms_coupons_enter_coupon_form',
    'weight' => 11,
    );
  
  return $fields;
}

/*
 * Implementation of hook_ms_cart_fields()
 */
function ms_coupons_ms_cart_fields($cart) {
  $fields = array();
  // Show the Coupon Entry Form
  $fields[] = array(
    'id' => 'ms_coupons_enter_coupon',
    'title' => 'Discount Coupon',
    'html' => drupal_get_form('ms_coupons_enter_coupon_cart_form'),
    'weight' => 11,
    );
  
  return $fields;
}